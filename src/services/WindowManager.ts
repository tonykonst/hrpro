/**
 * WindowManager - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * 
 * –ü—Ä–∏–Ω—Ü–∏–ø—ã:
 * - –ï–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã –¥–ª—è –≤—Å–µ—Ö –æ–∫–æ–Ω
 * - –†–µ–∞–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
 * - –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è IPC —Å–≤—è–∑—å
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
 */

import { EventEmitter } from 'events';

export interface WindowState {
  isVisible: boolean;
  isRecording: boolean;
  hasData: boolean;
}

export interface WindowConfig {
  id: string;
  type: 'control' | 'data';
  title: string;
  width: number;
  height: number;
  minWidth?: number;
  minHeight?: number;
  frame?: boolean;
  transparent?: boolean;
  alwaysOnTop?: boolean;
  skipTaskbar?: boolean;
  resizable?: boolean;
}

export class WindowManager extends EventEmitter {
  private static instance: WindowManager;
  private windows: Map<string, any> = new Map();
  private windowStates: Map<string, WindowState> = new Map();
  private recordingState: boolean = false;

  private constructor() {
    super();
    this.setupEventHandlers();
  }

  public static getInstance(): WindowManager {
    if (!WindowManager.instance) {
      WindowManager.instance = new WindowManager();
    }
    return WindowManager.instance;
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –æ–∫–Ω–æ —Å –¥–∞–Ω–Ω—ã–º–∏
   */
  public async createDataWindow(): Promise<void> {
    try {
      if (this.windows.has('data')) {
        console.log('üì± [WindowManager] Data window already exists');
        return;
      }

      console.log('üì± [WindowManager] Creating data window...');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –≤ main –ø—Ä–æ—Ü–µ—Å—Å
      if (window.require) {
        const { ipcRenderer } = window.require('electron');
        await ipcRenderer.invoke('create-data-window');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.windowStates.set('data', {
          isVisible: true,
          isRecording: this.recordingState,
          hasData: false
        });
        
        this.emit('window-created', 'data');
        console.log('‚úÖ [WindowManager] Data window created successfully');
      }
    } catch (error) {
      console.error('‚ùå [WindowManager] Failed to create data window:', error);
      this.emit('error', error);
    }
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ —Å –¥–∞–Ω–Ω—ã–º–∏
   */
  public async closeDataWindow(): Promise<void> {
    try {
      if (!this.windows.has('data')) {
        console.log('üì± [WindowManager] Data window does not exist');
        return;
      }

      console.log('üì± [WindowManager] Closing data window...');
      
      if (window.require) {
        const { ipcRenderer } = window.require('electron');
        await ipcRenderer.invoke('close-data-window');
        
        this.windows.delete('data');
        this.windowStates.delete('data');
        
        this.emit('window-closed', 'data');
        console.log('‚úÖ [WindowManager] Data window closed successfully');
      }
    } catch (error) {
      console.error('‚ùå [WindowManager] Failed to close data window:', error);
      this.emit('error', error);
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø–∏—Å–∏
   */
  public setRecordingState(isRecording: boolean): void {
    const previousState = this.recordingState;
    this.recordingState = isRecording;
    
    console.log(`üé§ [WindowManager] Recording state changed: ${previousState} ‚Üí ${isRecording}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –æ–∫–æ–Ω
    this.windowStates.forEach((state, windowId) => {
      state.isRecording = isRecording;
      this.windowStates.set(windowId, state);
    });
    
    this.emit('recording-state-changed', isRecording);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è–µ–º –æ–∫–Ω–æ–º –¥–∞–Ω–Ω—ã—Ö
    this.handleDataWindowLifecycle(isRecording);
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –æ–∫–Ω–∞ –¥–∞–Ω–Ω—ã—Ö
   */
  private async handleDataWindowLifecycle(isRecording: boolean): Promise<void> {
    if (isRecording) {
      // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å - —Å–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      if (!this.windows.has('data')) {
        await this.createDataWindow();
      }
    } else {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å - –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
      if (this.windows.has('data')) {
        await this.closeDataWindow();
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∫–Ω–∞
   */
  public getWindowState(windowId: string): WindowState | undefined {
    return this.windowStates.get(windowId);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø–∏—Å–∏
   */
  public getRecordingState(): boolean {
    return this.recordingState;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–∫–Ω–æ
   */
  public hasWindow(windowId: string): boolean {
    return this.windows.has(windowId);
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  private setupEventHandlers(): void {
    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç main –ø—Ä–æ—Ü–µ—Å—Å–∞
    if (window.require) {
      const { ipcRenderer } = window.require('electron');
      
      // –û–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–æ
      ipcRenderer.on('window-created', (event: any, windowId: string) => {
        this.windows.set(windowId, { id: windowId });
        console.log(`üì± [WindowManager] Window ${windowId} registered`);
      });
      
      // –û–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ
      ipcRenderer.on('window-closed', (event: any, windowId: string) => {
        this.windows.delete(windowId);
        this.windowStates.delete(windowId);
        console.log(`üì± [WindowManager] Window ${windowId} unregistered`);
      });
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  public cleanup(): void {
    this.windows.clear();
    this.windowStates.clear();
    this.removeAllListeners();
    console.log('üßπ [WindowManager] Cleanup completed');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
export const windowManager = WindowManager.getInstance();
