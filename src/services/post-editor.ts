// LLM Post-Editor Service for ASR Correction
// Improves ASR quality for Russian+English mixed speech and technical terms

import Anthropic from '@anthropic-ai/sdk';

export interface PostEditorConfig {
  apiKey: string;
  model: string; // Should be fast model like claude-haiku or gpt-4o-mini
  maxTokens: number;
  temperature: number;
  maxRequestsPerSecond: number;
  timeoutMs: number;
}

export interface CorrectionContext {
  jobTerms: string[]; // Job description terms (–±—É–¥–µ—Ç –ø–æ–∑–∂–µ)
  synonymDictionary: Record<string, string>; // –°–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤
}

export interface CorrectionResult {
  correctedText: string;
  wasChanged: boolean;
  confidence: number;
  processingTimeMs: number;
}

export interface SegmentAnalysis {
  needsCorrection: boolean;
  reasons: string[];
  confidence: number;
  language: 'ru' | 'en' | 'mixed';
  technicalTerms: string[];
}

export class PostEditorService {
  private anthropic: Anthropic | null;
  private config: PostEditorConfig;
  private context: CorrectionContext;
  private lastRequestTime: number = 0;
  private requestQueue: Promise<any> = Promise.resolve();

  constructor(config: PostEditorConfig, context: CorrectionContext) {
    this.config = config;
    this.context = context;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –∫–ª—é—á –µ—Å—Ç—å
    if (!config.apiKey || config.apiKey === 'your_claude_api_key_here') {
      console.warn('‚ö†Ô∏è [POST-EDITOR] Claude API key not configured, post-editing will be disabled');
      this.anthropic = null;
      return;
    }
    
    try {
      this.anthropic = new Anthropic({
        apiKey: config.apiKey,
        dangerouslyAllowBrowser: true, // –†–∞–∑—Ä–µ—à–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ Electron renderer
      });
    } catch (error) {
      console.error('‚ùå [POST-EDITOR] Failed to initialize Anthropic:', error);
      this.anthropic = null;
    }
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω—É–∂–Ω–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
  analyzeSegment(text: string, confidence: number): SegmentAnalysis {
    const analysis: SegmentAnalysis = {
      needsCorrection: false,
      reasons: [],
      confidence: 0,
      language: this.detectLanguage(text),
      technicalTerms: this.extractTechnicalTerms(text)
    };

    // –ï—Å–ª–∏ Anthropic –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    if (!this.anthropic) {
      return analysis;
    }

    // –¢—Ä–∏–≥–≥–µ—Ä 1: –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (–±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–µ—á–∏)
    if (confidence < 0.7) {
      analysis.needsCorrection = true;
      analysis.reasons.push('low_confidence');
    }

    // –¢—Ä–∏–≥–≥–µ—Ä 2: –°–º–µ—à–∞–Ω–Ω—ã–π —è–∑—ã–∫
    if (analysis.language === 'mixed') {
      analysis.needsCorrection = true;
      analysis.reasons.push('mixed_language');
    }

    // –¢—Ä–∏–≥–≥–µ—Ä 3: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
    if (analysis.technicalTerms.length > 0) {
      analysis.needsCorrection = true;
      analysis.reasons.push('technical_terms');
    }

    // –¢—Ä–∏–≥–≥–µ—Ä 4: –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ (–Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ)
    const suspiciousWords = this.findSuspiciousWords(text);
    if (suspiciousWords.length > 0) {
      analysis.needsCorrection = true;
      analysis.reasons.push('suspicious_words');
    }

    // –¢—Ä–∏–≥–≥–µ—Ä 5: –¶–∏—Ñ—Ä—ã, –≤–µ—Ä—Å–∏–∏, –∫–æ–º–∞–Ω–¥—ã
    if (this.hasVersionsOrCommands(text)) {
      analysis.needsCorrection = true;
      analysis.reasons.push('versions_commands');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã (–Ω–µ –±–æ–ª—å—à–µ ~120 —Å–ª–æ–≤)
    const wordCount = text.trim().split(/\s+/).length;
    if (wordCount > 120) {
      analysis.needsCorrection = false;
      analysis.reasons = ['text_too_long'];
    }

    analysis.confidence = this.calculateAnalysisConfidence(analysis);

    return analysis;
  }

  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é LLM
  async correctText(text: string, analysis: SegmentAnalysis): Promise<CorrectionResult> {
    const startTime = Date.now();

    try {
      // Rate limiting
      await this.enforceRateLimit();

      const systemPrompt = this.buildSystemPrompt();
      const userPrompt = this.buildUserPrompt(text, analysis);

      console.log('üîß Post-editing with LLM:', {
        text_length: text.length,
        reasons: analysis.reasons,
        language: analysis.language,
        tech_terms: analysis.technicalTerms.length
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Anthropic –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
      if (!this.anthropic) {
        console.warn('‚ö†Ô∏è [POST-EDITOR] Anthropic not initialized, skipping correction');
        return {
          originalText: text,
          correctedText: text,
          changes: [],
          confidence: 0,
          reasoning: 'Anthropic not initialized'
        };
      }

      const response = await Promise.race([
        this.anthropic.messages.create({
          model: this.config.model,
          max_tokens: this.config.maxTokens,
          temperature: this.config.temperature,
          system: systemPrompt,
          messages: [{
            role: 'user',
            content: userPrompt
          }]
        }),
        this.createTimeoutPromise(this.config.timeoutMs)
      ]);

      const content = response.content[0];
      if (content.type !== 'text') {
        throw new Error('Unexpected response type from LLM');
      }

      const result = JSON.parse(content.text);
      const processingTime = Date.now() - startTime;

      console.log('‚úÖ Post-editing complete:', {
        original_length: text.length,
        corrected_length: result.corrected_text.length,
        was_changed: result.was_changed,
        processing_time: processingTime + 'ms'
      });

      return {
        correctedText: result.corrected_text,
        wasChanged: result.was_changed,
        confidence: result.confidence,
        processingTimeMs: processingTime
      };

    } catch (error) {
      const processingTime = Date.now() - startTime;
      console.warn('‚ö†Ô∏è Post-editing failed:', error);

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
      return {
        correctedText: text,
        wasChanged: false,
        confidence: 0,
        processingTimeMs: processingTime
      };
    }
  }

  // –î–µ—Ç–µ–∫—Ü–∏—è —è–∑—ã–∫–∞
  private detectLanguage(text: string): 'ru' | 'en' | 'mixed' {
    const cyrillicPattern = /[–∞-—è—ë]/i;
    const latinPattern = /[a-z]/i;
    
    const hasCyrillic = cyrillicPattern.test(text);
    const hasLatin = latinPattern.test(text);
    
    if (hasCyrillic && hasLatin) return 'mixed';
    if (hasCyrillic) return 'ru';
    return 'en';
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
  private extractTechnicalTerms(text: string): string[] {
    const patterns = [
      /\b[A-Z][a-z]*[A-Z][a-zA-Z]*\b/g, // CamelCase
      /\b\w+\.(js|ts|py|java|go|rs|sql|json|yaml|yml|xml|html|css)\b/g, // Extensions
      /\b(API|SDK|UI|UX|DB|SQL|REST|GraphQL|JWT|OAuth|HTTP|HTTPS|JSON|XML|HTML|CSS|NPM|Git|Docker|Kubernetes|AWS|Azure|GCP)\b/g, // Tech acronyms
      /\b[a-z]+\-[a-z\-]+\b/g, // kebab-case
      /\b[a-z_]+_[a-z_]+\b/g, // snake_case
      /\bv?\d+\.\d+(\.\d+)?(\-[a-z0-9\-]+)?(\+[a-z0-9\-]+)?\b/g, // –í–µ—Ä—Å–∏–∏
    ];

    const terms: string[] = [];
    patterns.forEach(pattern => {
      const matches = text.match(pattern);
      if (matches) {
        terms.push(...matches);
      }
    });

    return [...new Set(terms)];
  }

  // –ü–æ–∏—Å–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤
  private findSuspiciousWords(text: string): string[] {
    // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤
    const words = text.toLowerCase().split(/\s+/);
    const suspicious: string[] = [];

    for (const word of words) {
      // –°–ª–æ–≤–∞ —Å –Ω–µ–æ–±—ã—á–Ω—ã–º–∏ —Å–æ—á–µ—Ç–∞–Ω–∏—è–º–∏ –±—É–∫–≤
      if (word.length > 3 && this.hasSuspiciousPattern(word)) {
        suspicious.push(word);
      }
    }

    return suspicious;
  }

  private hasSuspiciousPattern(word: string): boolean {
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –æ—à–∏–±–∫–∏ ASR
    const suspiciousPatterns = [
      /[–∞-—è]{1}[a-z]{2,}/i, // –°–º–µ—à–µ–Ω–∏–µ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –∏ –ª–∞—Ç–∏–Ω–∏—Ü—ã –≤–Ω—É—Ç—Ä–∏ —Å–ª–æ–≤–∞
      /[a-z]{1}[–∞-—è]{2,}/i,
      /\d{1}[–∞-—èa-z]{1,}/i, // –¶–∏—Ñ—Ä–∞ –ø—Ä–∏–ª–∏–ø–ª–∞ –∫ —Å–ª–æ–≤—É
      /[–∞-—èa-z]{1,}\d{1}/i, // –°–ª–æ–≤–æ –ø—Ä–∏–ª–∏–ø–ª–æ –∫ —Ü–∏—Ñ—Ä–µ
    ];

    return suspiciousPatterns.some(pattern => pattern.test(word));
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π –∏ –∫–æ–º–∞–Ω–¥
  private hasVersionsOrCommands(text: string): boolean {
    const patterns = [
      /\bv?\d+\.\d+/i, // –í–µ—Ä—Å–∏–∏
      /\b(npm|yarn|pip|docker|kubectl|git|node|python|java|mvn|gradle)\s+/i, // –ö–æ–º–∞–Ω–¥—ã
      /\b\d+\.\d+\.\d+/i, // –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –≤–µ—Ä—Å–∏–∏
      /\b(install|update|build|run|start|stop|deploy|test)\b/i, // Command keywords
    ];

    return patterns.some(pattern => pattern.test(text));
  }

  private calculateAnalysisConfidence(analysis: SegmentAnalysis): number {
    let confidence = 0.5; // Base confidence
    
    if (analysis.reasons.includes('low_confidence')) confidence += 0.2;
    if (analysis.reasons.includes('mixed_language')) confidence += 0.15;
    if (analysis.reasons.includes('technical_terms')) confidence += 0.1;
    if (analysis.reasons.includes('suspicious_words')) confidence += 0.1;
    if (analysis.reasons.includes('versions_commands')) confidence += 0.05;

    return Math.min(confidence, 1.0);
  }

  // Rate limiting
  private async enforceRateLimit(): Promise<void> {
    const now = Date.now();
    const minInterval = 1000 / this.config.maxRequestsPerSecond;
    const timeSinceLastRequest = now - this.lastRequestTime;

    if (timeSinceLastRequest < minInterval) {
      const waitTime = minInterval - timeSinceLastRequest;
      await new Promise(resolve => setTimeout(resolve, waitTime));
    }

    this.lastRequestTime = Date.now();
  }

  private createTimeoutPromise(timeoutMs: number): Promise<never> {
    return new Promise((_, reject) => {
      setTimeout(() => reject(new Error('Post-editing timeout')), timeoutMs);
    });
  }

  private buildSystemPrompt(): string {
    return `You are a specialized post-editor for speech recognition (ASR) outputs. Your task is to fix ONLY specific errors while preserving the original meaning completely.

STRICT RULES:
- Fix ONLY: technical terms, punctuation, capitalization
- NEVER rephrase or change meaning
- NEVER add or remove words (except obvious ASR errors)
- Keep the exact same sentence structure
- Preserve all speaking patterns and hesitations

WHAT TO FIX:
1. Technical terms: "–∫—É–±–µ—Ä" ‚Üí "Kubernetes", "–ø–æ—Å—Ç–≥—Ä–µ—Å" ‚Üí "PostgreSQL"
2. Punctuation: add commas, periods, question marks where clearly needed
3. Capitalization: proper nouns, acronyms, sentence starts
4. Mixed language issues: separate stuck-together words
5. Version numbers: ensure proper formatting

WHAT NOT TO CHANGE:
- Informal speech patterns
- Repetitions or hesitations
- Grammatical structures
- Word order
- Colloquial expressions

CONTEXT DICTIONARY:
${JSON.stringify(this.context.synonymDictionary, null, 2)}

JOB TERMS (important context):
${this.context.jobTerms.join(', ') || 'None provided yet'}

OUTPUT FORMAT (strict JSON):
{
  "corrected_text": "The corrected text",
  "was_changed": true/false,
  "confidence": 0.85
}`;
  }

  private buildUserPrompt(text: string, analysis: SegmentAnalysis): string {
    return `Fix this ASR output:

ORIGINAL TEXT:
"${text}"

DETECTED ISSUES:
- Language: ${analysis.language}
- Technical terms found: ${analysis.technicalTerms.join(', ') || 'none'}
- Reasons for correction: ${analysis.reasons.join(', ')}

Apply minimal corrections for technical accuracy while preserving natural speech patterns.
Return valid JSON only.`;
  }

  // Update context
  updateContext(newContext: Partial<CorrectionContext>): void {
    this.context = { ...this.context, ...newContext };
  }
}

// Factory function
export const createPostEditorService = (
  config: PostEditorConfig,
  context?: Partial<CorrectionContext>
): PostEditorService => {
  // Default context with example synonyms
  const defaultContext: CorrectionContext = {
    jobTerms: [], // –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
    synonymDictionary: {
      // –ü—Ä–∏–º–µ—Ä—ã —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π
      '–∫—É–±–µ—Ä': 'Kubernetes',
      '–∫—É–±–µ—Ä–Ω–µ—Ç–µ—Å': 'Kubernetes',
      '–ø–æ—Å—Ç–≥—Ä–µ—Å': 'PostgreSQL',
      '–ø–æ—Å—Ç–≥—Ä–µ—Å—Å': 'PostgreSQL',
      '—Ä–µ–∞–∫—Ç': 'React',
      '–Ω–æ–¥': 'Node.js',
      '–Ω–æ–¥–µ': 'Node.js',
      '—Ç–∞–π–ø—Å–∫—Ä–∏–ø—Ç': 'TypeScript',
      '–¥–∂–∞–≤–∞—Å–∫—Ä–∏–ø—Ç': 'JavaScript',
      '–≥–∏—Ç': 'Git',
      '–≥–∏—Ç—Ö–∞–±': 'GitHub',
      '–¥–æ–∫–µ—Ä': 'Docker',
      '–º–æ–Ω–≥–æ': 'MongoDB',
      '—Ä–µ–¥–∏—Å': 'Redis',
      '—ç–ª–∞—Å—Ç–∏–∫': 'Elasticsearch',
      '–∞–ø–∏': 'API',
      '—Ä–µ—Å—Ç': 'REST',
      '–¥–∂—Å–æ–Ω': 'JSON',
      '—Ö—Ç–º–ª': 'HTML',
      '—Ü—Å—Å': 'CSS'
    }
  };

  const mergedContext = { ...defaultContext, ...context };
  return new PostEditorService(config, mergedContext);
};
