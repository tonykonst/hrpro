import { 
  SmartBuffer, 
  BufferConfig, 
  SpeechSegment, 
  BufferOverlap,
  WordMatch,
  VADResult 
} from '../../../types/v041/buffering';

/**
 * –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ —Å –Ω—É–ª–µ–≤–æ–π –ø–æ—Ç–µ—Ä–µ–π —Å–ª–æ–≤
 * –û—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–µ–π—Å—è –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏
 */
export class SmartBufferManager {
  private config: BufferConfig;
  private buffers: Map<string, SmartBuffer> = new Map();
  private currentBuffer: SmartBuffer | null = null;
  private audioContext: AudioContext;
  private sampleRate: number;
  private isRecording = false;
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
  private averageSpeechRate = 150; // —Å–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É
  private recentSilenceDurations: number[] = [];
  
  constructor(config: BufferConfig, audioContext: AudioContext) {
    this.config = {
      baseWindowSize: 30,
      overlapSize: 8,
      adaptToSpeechRate: true,
      extendOnActiveSpeech: true,
      silenceThreshold: 0.5,
      energyThreshold: 0.1,
      preSpeechBuffer: 0.5,
      postSpeechBuffer: 1.0,
      ...config
    };
    
    this.audioContext = audioContext;
    this.sampleRate = audioContext.sampleRate;
    
    console.log('üéØ SmartBufferManager initialized:', {
      windowSize: this.config.baseWindowSize,
      overlap: this.config.overlapSize,
      sampleRate: this.sampleRate
    });
  }

  /**
   * –ù–∞—á–∏–Ω–∞–µ—Ç –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫–∞
   */
  startBuffering(): void {
    this.isRecording = true;
    this.createNewBuffer();
    console.log('‚ñ∂Ô∏è Smart buffering started');
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é
   */
  stopBuffering(): void {
    this.isRecording = false;
    if (this.currentBuffer && !this.currentBuffer.isProcessed) {
      this.finalizeBuffer(this.currentBuffer);
    }
    console.log('‚èπÔ∏è Smart buffering stopped');
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ —á–∞–Ω–∫ –≤ —Ç–µ–∫—É—â–∏–π –±—É—Ñ–µ—Ä
   */
  addAudioChunk(audioChunk: Float32Array, vadResult: VADResult): void {
    if (!this.isRecording || !this.currentBuffer) {
      return;
    }

    // –†–∞—Å—à–∏—Ä—è–µ–º –±—É—Ñ–µ—Ä –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const newAudioData = new Float32Array(
      this.currentBuffer.audioData.length + audioChunk.length
    );
    newAudioData.set(this.currentBuffer.audioData);
    newAudioData.set(audioChunk, this.currentBuffer.audioData.length);
    
    this.currentBuffer.audioData = newAudioData;
    this.currentBuffer.endTime = this.getCurrentTime();
    this.currentBuffer.duration = this.currentBuffer.endTime - this.currentBuffer.startTime;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±—É—Ñ–µ—Ä
    this.checkBufferSegmentation(vadResult);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –±—É—Ñ–µ—Ä
   */
  private checkBufferSegmentation(vadResult: VADResult): void {
    if (!this.currentBuffer) return;

    const shouldSegment = this.shouldCreateNewBuffer(vadResult);
    
    if (shouldSegment) {
      this.finalizeCurrentBufferAndCreateNew();
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±—É—Ñ–µ—Ä
   */
  private shouldCreateNewBuffer(vadResult: VADResult): boolean {
    if (!this.currentBuffer) return true;

    const duration = this.currentBuffer.duration;
    const baseSize = this.getAdaptiveWindowSize();

    // 1. –ü—Ä–µ–≤—ã—à–µ–Ω –±–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
    if (duration >= baseSize) {
      return true;
    }

    // 2. –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–∞—É–∑–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (!vadResult.isSpeech && this.isLongSilence()) {
      return true;
    }

    // 3. –ù–∏–∑–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è —Å–∏–≥–Ω–∞–ª–∞ (—Ç–∏—à–∏–Ω–∞)
    if (vadResult.energyLevel < this.config.energyThreshold) {
      return true;
    }

    return false;
  }

  /**
   * –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–µ—á–∏
   */
  private getAdaptiveWindowSize(): number {
    if (!this.config.adaptToSpeechRate) {
      return this.config.baseWindowSize;
    }

    // –ï—Å–ª–∏ —Ä–µ—á—å –±—ã—Å—Ç—Ä–∞—è - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–∫–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    // –ï—Å–ª–∏ –º–µ–¥–ª–µ–Ω–Ω–∞—è - —É–º–µ–Ω—å—à–∞–µ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const speedFactor = this.averageSpeechRate / 150; // 150 wpm - —Å—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å
    const adaptiveSize = this.config.baseWindowSize * (0.8 + speedFactor * 0.4);
    
    return Math.max(20, Math.min(45, adaptiveSize)); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 20-45 —Å–µ–∫—É–Ω–¥
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∏—à–∏–Ω—ã
   */
  private isLongSilence(): boolean {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–µ–Ω –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —á–∞–Ω–∫–æ–≤
    return this.recentSilenceDurations.length > 0 && 
           this.recentSilenceDurations[this.recentSilenceDurations.length - 1] > this.config.silenceThreshold;
  }

  /**
   * –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±—É—Ñ–µ—Ä –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º
   */
  private finalizeCurrentBufferAndCreateNew(): void {
    if (!this.currentBuffer) return;

    const finalizingBuffer = this.currentBuffer;
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±—É—Ñ–µ—Ä —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º
    const newBuffer = this.createOverlappingBuffer(finalizingBuffer);
    
    // –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π –±—É—Ñ–µ—Ä
    this.finalizeBuffer(finalizingBuffer);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–∫ —Ç–µ–∫—É—â–∏–π
    this.currentBuffer = newBuffer;
    this.buffers.set(newBuffer.id, newBuffer);

    console.log('üîÑ Buffer segmented:', {
      finalized: finalizingBuffer.id,
      new: newBuffer.id,
      overlap: `${this.config.overlapSize}s`
    });
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –±—É—Ñ–µ—Ä —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º
   */
  private createOverlappingBuffer(previousBuffer: SmartBuffer): SmartBuffer {
    const overlapSamples = this.config.overlapSize * this.sampleRate;
    const previousSamples = previousBuffer.audioData.length;
    
    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–µ–∫—É–Ω–¥ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –±—É—Ñ–µ—Ä–∞
    const overlapStart = Math.max(0, previousSamples - overlapSamples);
    const overlapData = previousBuffer.audioData.slice(overlapStart);
    
    const newBuffer: SmartBuffer = {
      id: this.generateBufferId(),
      audioData: new Float32Array(overlapData),
      startTime: previousBuffer.endTime - this.config.overlapSize,
      endTime: previousBuffer.endTime,
      duration: this.config.overlapSize,
      overlapWith: [previousBuffer.id],
      isProcessed: false
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–∏
    previousBuffer.overlapWith.push(newBuffer.id);

    return newBuffer;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –±—É—Ñ–µ—Ä
   */
  private createNewBuffer(): SmartBuffer {
    const buffer: SmartBuffer = {
      id: this.generateBufferId(),
      audioData: new Float32Array(0),
      startTime: this.getCurrentTime(),
      endTime: this.getCurrentTime(),
      duration: 0,
      overlapWith: [],
      isProcessed: false
    };

    this.currentBuffer = buffer;
    this.buffers.set(buffer.id, buffer);
    
    return buffer;
  }

  /**
   * –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±—É—Ñ–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  private finalizeBuffer(buffer: SmartBuffer): void {
    buffer.isProcessed = true;
    
    // –î–æ–±–∞–≤–ª—è–µ–º pre/post speech –±—É—Ñ–µ—Ä—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    this.addSpeechBuffers(buffer);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±—É—Ñ–µ—Ä–∞
    this.onBufferReady(buffer);
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –±—É—Ñ–µ—Ä—ã –¥–æ –∏ –ø–æ—Å–ª–µ —Ä–µ—á–∏
   */
  private addSpeechBuffers(buffer: SmartBuffer): void {
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑ VAD –¥–∞–Ω–Ω—ã—Ö
    // –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ pre/post speech –±—É—Ñ–µ—Ä–æ–≤
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—É—Ñ–µ—Ä—ã
   */
  getReadyBuffers(): SmartBuffer[] {
    return Array.from(this.buffers.values()).filter(buffer => 
      buffer.isProcessed && !buffer.transcription
    );
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –º–µ–∂–¥—É –±—É—Ñ–µ—Ä–∞–º–∏
   */
  getBufferOverlaps(): BufferOverlap[] {
    const overlaps: BufferOverlap[] = [];
    
    for (const buffer of this.buffers.values()) {
      for (const overlapId of buffer.overlapWith) {
        const overlapBuffer = this.buffers.get(overlapId);
        if (overlapBuffer) {
          overlaps.push(this.calculateOverlap(buffer, overlapBuffer));
        }
      }
    }
    
    return overlaps;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –º–µ–∂–¥—É –±—É—Ñ–µ—Ä–∞–º–∏
   */
  private calculateOverlap(buffer1: SmartBuffer, buffer2: SmartBuffer): BufferOverlap {
    const overlapStart = Math.max(buffer1.startTime, buffer2.startTime);
    const overlapEnd = Math.min(buffer1.endTime, buffer2.endTime);
    const overlapDuration = Math.max(0, overlapEnd - overlapStart);

    return {
      buffer1Id: buffer1.id,
      buffer2Id: buffer2.id,
      overlapStart,
      overlapEnd,
      overlapDuration,
      wordMatches: [] // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    };
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–µ—á–∏
   */
  updateSpeechRate(wordsPerMinute: number): void {
    this.averageSpeechRate = (this.averageSpeechRate * 0.8) + (wordsPerMinute * 0.2);
    console.log('üìä Speech rate updated:', this.averageSpeechRate, 'wpm');
  }

  /**
   * Callback –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±—É—Ñ–µ—Ä–∞
   */
  private onBufferReady(buffer: SmartBuffer): void {
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π
    console.log('‚úÖ Buffer ready for transcription:', buffer.id);
  }

  // –£—Ç–∏–ª–∏—Ç—ã
  private generateBufferId(): string {
    return `buffer_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  private getCurrentTime(): number {
    return Date.now() / 1000;
  }

  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  get activeBuffers(): number {
    return this.buffers.size;
  }

  get currentBufferDuration(): number {
    return this.currentBuffer?.duration || 0;
  }

  get totalProcessedTime(): number {
    return Array.from(this.buffers.values())
      .filter(b => b.isProcessed)
      .reduce((sum, b) => sum + b.duration, 0);
  }
}
