import { VADResult } from '../../../types/v041/buffering';

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π Voice Activity Detection —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–µ–π —Ä–µ—á–∏
 * –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ —ç–Ω–µ—Ä–≥–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –∏ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
 */
export class EnhancedVAD {
  private audioContext: AudioContext;
  private analyser: AnalyserNode;
  private dataArray: Uint8Array;
  private frequencyData: Uint8Array;
  
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–µ–∫—Ü–∏–∏
  private energyThreshold = 0.1;
  private spectralThreshold = 0.15;
  private preSpeechSensitivity = 0.05; // –ë–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –¥–ª—è pre-speech
  
  // –ë—É—Ñ–µ—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  private energyHistory: number[] = [];
  private spectralHistory: number[] = [];
  private readonly historySize = 10; // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  private isSpeechActive = false;
  private preSpeechDetected = false;
  private speechStartTime = 0;
  private lastActivityTime = 0;
  
  constructor(audioContext: AudioContext, stream: MediaStream) {
    this.audioContext = audioContext;
    
    // –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    const source = audioContext.createMediaStreamSource(stream);
    this.analyser = audioContext.createAnalyser();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è –ª—É—á—à–µ–π –¥–µ—Ç–µ–∫—Ü–∏–∏
    this.analyser.fftSize = 2048;
    this.analyser.smoothingTimeConstant = 0.3;
    this.analyser.minDecibels = -90;
    this.analyser.maxDecibels = -10;
    
    source.connect(this.analyser);
    
    // –ë—É—Ñ–µ—Ä—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);
    this.frequencyData = new Uint8Array(this.analyser.frequencyBinCount);
    
    console.log('üé§ EnhancedVAD initialized:', {
      fftSize: this.analyser.fftSize,
      frequencyBinCount: this.analyser.frequencyBinCount
    });
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —á–∞–Ω–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç VAD
   */
  analyze(audioChunk: Float32Array): VADResult {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    this.analyser.getByteTimeDomainData(this.dataArray);
    this.analyser.getByteFrequencyData(this.frequencyData);
    
    // –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    const energyLevel = this.calculateEnergyLevel(audioChunk);
    const spectralCentroid = this.calculateSpectralCentroid();
    const spectralFlux = this.calculateSpectralFlux();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    this.updateHistory(energyLevel, spectralCentroid);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ—á–∏
    const speechDetection = this.detectSpeechActivity(energyLevel, spectralCentroid, spectralFlux);
    
    // –î–µ—Ç–µ–∫—Ü–∏—è pre-speech (–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–µ—á–∏)
    const preSpeechDetection = this.detectPreSpeech(energyLevel, spectralCentroid);
    
    const result: VADResult = {
      isSpeech: speechDetection.isSpeech,
      confidence: speechDetection.confidence,
      energyLevel: energyLevel,
      speechStart: speechDetection.speechStart,
      speechEnd: speechDetection.speechEnd,
      preSpeechDetected: preSpeechDetection
    };

    this.updateState(result);
    
    return result;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ —Å–∏–≥–Ω–∞–ª–∞
   */
  private calculateEnergyLevel(audioChunk: Float32Array): number {
    let sum = 0;
    for (let i = 0; i < audioChunk.length; i++) {
      sum += audioChunk[i] * audioChunk[i];
    }
    return Math.sqrt(sum / audioChunk.length);
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä–æ–∏–¥ (—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —Ç–µ–º–±—Ä–∞)
   */
  private calculateSpectralCentroid(): number {
    let weightedSum = 0;
    let magnitudeSum = 0;
    
    for (let i = 0; i < this.frequencyData.length; i++) {
      const magnitude = this.frequencyData[i] / 255.0;
      const frequency = (i * this.audioContext.sampleRate) / (2 * this.frequencyData.length);
      
      weightedSum += frequency * magnitude;
      magnitudeSum += magnitude;
    }
    
    return magnitudeSum > 0 ? weightedSum / magnitudeSum : 0;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π —Ñ–ª–∞–∫—Å (–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø–µ–∫—Ç—Ä–∞)
   */
  private calculateSpectralFlux(): number {
    if (this.spectralHistory.length < 2) return 0;
    
    const current = this.spectralHistory[this.spectralHistory.length - 1];
    const previous = this.spectralHistory[this.spectralHistory.length - 2];
    
    return Math.abs(current - previous);
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ—Ä–µ–Ω–∏–π
   */
  private updateHistory(energy: number, spectral: number): void {
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    this.energyHistory.push(energy);
    this.spectralHistory.push(spectral);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
    if (this.energyHistory.length > this.historySize) {
      this.energyHistory.shift();
    }
    if (this.spectralHistory.length > this.historySize) {
      this.spectralHistory.shift();
    }
  }

  /**
   * –î–µ—Ç–µ–∫—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ—á–∏
   */
  private detectSpeechActivity(energy: number, spectral: number, flux: number): {
    isSpeech: boolean;
    confidence: number;
    speechStart?: number;
    speechEnd?: number;
  } {
    // –ë–∞–∑–æ–≤–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –ø–æ —ç–Ω–µ—Ä–≥–∏–∏
    const energyScore = energy > this.energyThreshold ? 1 : 0;
    
    // –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è (—Ä–µ—á—å –∏–º–µ–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–π —Å–ø–µ–∫—Ç—Ä)
    const spectralScore = this.isVoiceSpectrum(spectral) ? 1 : 0;
    
    // –î–µ—Ç–µ–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π (—Ä–µ—á—å –¥–∏–Ω–∞–º–∏—á–Ω–∞)
    const fluxScore = flux > 0.1 ? 1 : 0;
    
    // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏
    const adaptiveScore = this.getAdaptiveScore(energy, spectral);
    
    // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    const totalScore = (energyScore * 0.4) + (spectralScore * 0.3) + (fluxScore * 0.2) + (adaptiveScore * 0.1);
    const isSpeech = totalScore > 0.5;
    
    const now = Date.now() / 1000;
    let speechStart: number | undefined;
    let speechEnd: number | undefined;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ä–µ—á–∏
    if (isSpeech && !this.isSpeechActive) {
      speechStart = now;
      this.speechStartTime = now;
    } else if (!isSpeech && this.isSpeechActive) {
      speechEnd = now;
    }
    
    return {
      isSpeech,
      confidence: totalScore,
      speechStart,
      speechEnd
    };
  }

  /**
   * –î–µ—Ç–µ–∫—Ü–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ä–µ—á–∏ (pre-speech)
   */
  private detectPreSpeech(energy: number, spectral: number): boolean {
    // Pre-speech –¥–µ—Ç–µ–∫—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ —Å–ª–∞–±—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    // (–¥—ã—Ö–∞–Ω–∏–µ, –¥–≤–∏–∂–µ–Ω–∏–µ –≥—É–±, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–µ—á–∏)
    
    if (this.isSpeechActive) {
      return false; // –£–∂–µ –≥–æ–≤–æ—Ä–∏–º
    }
    
    // –ù–µ–±–æ–ª—å—à–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏
    const energyIncrease = this.getEnergyTrend() > 0.02;
    
    // –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ø–µ–∫—Ç—Ä–µ (–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—Ä—Ç–∏–∫—É–ª—è—Ü–∏–∏)
    const spectralChange = this.getSpectralVariance() > 100;
    
    // –°–ª–∞–±—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const weakVoiceActivity = energy > this.preSpeechSensitivity && energy < this.energyThreshold;
    
    return energyIncrease || spectralChange || weakVoiceActivity;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ø–µ–∫—Ç—Ä –≥–æ–ª–æ—Å–æ–≤—ã–º
   */
  private isVoiceSpectrum(spectralCentroid: number): boolean {
    // –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –≥–æ–ª–æ—Å –æ–±—ã—á–Ω–æ –∏–º–µ–µ—Ç —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä–æ–∏–¥ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 500-4000 Hz
    return spectralCentroid >= 500 && spectralCentroid <= 4000;
  }

  /**
   * –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏
   */
  private getAdaptiveScore(energy: number, spectral: number): number {
    if (this.energyHistory.length < 3) return 0;
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –Ω–µ–¥–∞–≤–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π
    const recentAvgEnergy = this.energyHistory.slice(-3).reduce((a, b) => a + b) / 3;
    const recentAvgSpectral = this.spectralHistory.slice(-3).reduce((a, b) => a + b) / 3;
    
    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–∏—Ö - –≤–æ–∑–º–æ–∂–Ω–æ —Ä–µ—á—å
    const energyRatio = energy / (recentAvgEnergy + 0.001);
    const spectralRatio = spectral / (recentAvgSpectral + 1);
    
    return Math.min(1, (energyRatio - 1) * 2 + (spectralRatio - 1) * 0.5);
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Ç—Ä–µ–Ω–¥ —ç–Ω–µ—Ä–≥–∏–∏
   */
  private getEnergyTrend(): number {
    if (this.energyHistory.length < 3) return 0;
    
    const recent = this.energyHistory.slice(-3);
    const older = this.energyHistory.slice(-6, -3);
    
    if (older.length === 0) return 0;
    
    const recentAvg = recent.reduce((a, b) => a + b) / recent.length;
    const olderAvg = older.reduce((a, b) => a + b) / older.length;
    
    return recentAvg - olderAvg;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –≤–∞—Ä–∏–∞—Ü–∏—é —Å–ø–µ–∫—Ç—Ä–∞
   */
  private getSpectralVariance(): number {
    if (this.spectralHistory.length < 3) return 0;
    
    const recent = this.spectralHistory.slice(-3);
    const mean = recent.reduce((a, b) => a + b) / recent.length;
    
    return recent.reduce((sum, value) => sum + Math.pow(value - mean, 2), 0) / recent.length;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ VAD
   */
  private updateState(result: VADResult): void {
    const now = Date.now() / 1000;
    
    if (result.isSpeech) {
      this.lastActivityTime = now;
      if (!this.isSpeechActive) {
        this.isSpeechActive = true;
        console.log('üó£Ô∏è Speech started');
      }
    } else if (this.isSpeechActive) {
      // –†–µ—á—å –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª–∞—Å—å, –Ω–æ –¥–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
      if (now - this.lastActivityTime > 0.5) { // 500ms —Ç–∏—à–∏–Ω—ã
        this.isSpeechActive = false;
        console.log('ü§´ Speech ended');
      }
    }
    
    if (result.preSpeechDetected && !this.preSpeechDetected) {
      this.preSpeechDetected = true;
      console.log('üëÇ Pre-speech detected');
    } else if (!result.preSpeechDetected && this.preSpeechDetected) {
      this.preSpeechDetected = false;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  setSensitivity(energy: number, spectral: number, preSpeech: number): void {
    this.energyThreshold = energy;
    this.spectralThreshold = spectral;
    this.preSpeechSensitivity = preSpeech;
    
    console.log('üéõÔ∏è VAD sensitivity updated:', {
      energy: this.energyThreshold,
      spectral: this.spectralThreshold,
      preSpeech: this.preSpeechSensitivity
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ VAD
   */
  getStats(): {
    averageEnergy: number;
    averageSpectral: number;
    speechTime: number;
    isActive: boolean;
  } {
    const avgEnergy = this.energyHistory.length > 0 
      ? this.energyHistory.reduce((a, b) => a + b) / this.energyHistory.length 
      : 0;
      
    const avgSpectral = this.spectralHistory.length > 0 
      ? this.spectralHistory.reduce((a, b) => a + b) / this.spectralHistory.length 
      : 0;

    return {
      averageEnergy: avgEnergy,
      averageSpectral: avgSpectral,
      speechTime: this.isSpeechActive ? Date.now() / 1000 - this.speechStartTime : 0,
      isActive: this.isSpeechActive
    };
  }
}
