import { spawn, ChildProcess } from 'child_process';
import { writeFile, unlink } from 'fs/promises';
import { join } from 'path';
import { TranscriptionResult } from '../../../types/v041/buffering';

/**
 * –ù–∞—Å—Ç–æ—è—â–∏–π Whisper —Å–µ—Ä–≤–∏—Å —á–µ—Ä–µ–∑ Python –º–æ—Å—Ç
 * –ó–∞–º–µ–Ω—è–µ—Ç Deepgram –¥–ª—è –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
 */
export class RealWhisperService {
  private pythonPath: string;
  private scriptPath: string;
  private isInitialized = false;
  private processingQueue: Array<{
    audioBlob: Blob;
    resolve: (result: TranscriptionResult) => void;
    reject: (error: Error) => void;
    context?: string;
  }> = [];
  private isProcessing = false;
  
  // –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏
  private contextWindow: string[] = [];
  private readonly maxContextLength = 5;
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  private stats = {
    totalProcessed: 0,
    averageConfidence: 0,
    averageProcessingTime: 0,
    languageDistribution: new Map<string, number>(),
    technicalTermsDetected: 0
  };

  constructor() {
    // –ü—É—Ç—å –∫ Python –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    this.pythonPath = join(process.cwd(), 'venv_whisper', 'bin', 'python');
    this.scriptPath = join(process.cwd(), 'src', 'python', 'whisper_bridge.py');
    
    console.log('ü§ñ RealWhisperService initializing...');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
   */
  async initialize(): Promise<void> {
    if (this.isInitialized) return;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Python –∏ —Å–∫—Ä–∏–ø—Ç–∞
      await this.validateEnvironment();
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏
      await this.testModelLoading();
      
      this.isInitialized = true;
      console.log('‚úÖ RealWhisperService initialized successfully');
      
    } catch (error) {
      console.error('‚ùå Failed to initialize RealWhisperService:', error);
      throw error;
    }
  }

  /**
   * –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ blob
   */
  async transcribe(audioBlob: Blob, context?: string): Promise<TranscriptionResult> {
    if (!this.isInitialized) {
      await this.initialize();
    }

    return new Promise((resolve, reject) => {
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
      this.processingQueue.push({
        audioBlob,
        resolve,
        reject,
        context
      });

      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
      if (!this.isProcessing) {
        this.processQueue();
      }
    });
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
   */
  private async processQueue(): Promise<void> {
    if (this.isProcessing || this.processingQueue.length === 0) {
      return;
    }

    this.isProcessing = true;
    console.log(`‚ö° Processing Whisper queue: ${this.processingQueue.length} items`);

    while (this.processingQueue.length > 0) {
      const item = this.processingQueue.shift()!;
      
      try {
        const result = await this.processAudioBlob(item.audioBlob, item.context);
        item.resolve(result);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.updateContext(result.text);
        this.updateStats(result);
        
      } catch (error) {
        console.error('‚ùå Queue processing error:', error);
        item.reject(error as Error);
      }
    }

    this.isProcessing = false;
    console.log('‚úÖ Whisper queue processing completed');
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ blob
   */
  private async processAudioBlob(audioBlob: Blob, context?: string): Promise<TranscriptionResult> {
    const startTime = Date.now();
    let tempFilePath = '';

    try {
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      tempFilePath = await this.saveBlobToTempFile(audioBlob);
      
      // –°—Ç—Ä–æ–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
      const contextPrompt = this.buildContextPrompt(context);
      
      // –í—ã–∑—ã–≤–∞–µ–º Python Whisper
      const result = await this.callWhisperPython(tempFilePath, contextPrompt);
      
      const processingTime = Date.now() - startTime;
      
      if (!result.success) {
        throw new Error(result.error || 'Whisper processing failed');
      }

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç TranscriptionResult
      const transcriptionResult: TranscriptionResult = {
        text: result.text,
        confidence: result.confidence,
        wordTimestamps: result.word_timestamps || [],
        language: this.normalizeLanguage(result.language),
        isDraft: false,
        processingTime
      };

      console.log(`‚úÖ Whisper transcription: "${result.text.substring(0, 50)}..." (${(result.confidence * 100).toFixed(1)}%)`);
      
      return transcriptionResult;

    } finally {
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      if (tempFilePath) {
        try {
          await unlink(tempFilePath);
        } catch (error) {
          console.warn('‚ö†Ô∏è Failed to delete temp file:', tempFilePath);
        }
      }
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç Blob –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
   */
  private async saveBlobToTempFile(blob: Blob): Promise<string> {
    const buffer = Buffer.from(await blob.arrayBuffer());
    const tempFilePath = join(process.cwd(), 'temp', `whisper_${Date.now()}.wav`);
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é temp –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await writeFile(tempFilePath, buffer);
    
    return tempFilePath;
  }

  /**
   * –í—ã–∑—ã–≤–∞–µ—Ç Python Whisper —Å–∫—Ä–∏–ø—Ç
   */
  private async callWhisperPython(audioFilePath: string, contextPrompt: string): Promise<any> {
    return new Promise((resolve, reject) => {
      const args = [
        this.scriptPath,
        audioFilePath,
        '--model', 'large-v3',
        '--faster', // –ò—Å–ø–æ–ª—å–∑—É–µ–º faster-whisper
        '--context', contextPrompt
      ];

      const python = spawn(this.pythonPath, args, {
        stdio: ['pipe', 'pipe', 'pipe']
      });

      let stdout = '';
      let stderr = '';

      python.stdout.on('data', (data) => {
        stdout += data.toString();
      });

      python.stderr.on('data', (data) => {
        stderr += data.toString();
      });

      python.on('close', (code) => {
        if (code === 0) {
          try {
            const result = JSON.parse(stdout);
            resolve(result);
          } catch (parseError) {
            reject(new Error(`Failed to parse Whisper output: ${parseError}`));
          }
        } else {
          reject(new Error(`Whisper process failed (code ${code}): ${stderr}`));
        }
      });

      python.on('error', (error) => {
        reject(new Error(`Failed to spawn Whisper process: ${error.message}`));
      });
    });
  }

  /**
   * –°—Ç—Ä–æ–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
   */
  private buildContextPrompt(additionalContext?: string): string {
    let prompt = "–≠—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é. –¢–µ—Ä–º–∏–Ω—ã: API, React, TypeScript, Docker, Kubernetes, DevOps, CI/CD, –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ.";
    
    if (this.contextWindow.length > 0) {
      const context = this.contextWindow.slice(-3).join(' ');
      prompt += ` –ü—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: "${context}"`;
    }
    
    if (additionalContext) {
      prompt += ` –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: "${additionalContext}"`;
    }
    
    return prompt;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –æ–∫–Ω–æ
   */
  private updateContext(newText: string): void {
    if (newText.trim().length > 0) {
      this.contextWindow.push(newText.trim());
      
      if (this.contextWindow.length > this.maxContextLength) {
        this.contextWindow.shift();
      }
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  private updateStats(result: TranscriptionResult): void {
    this.stats.totalProcessed++;
    
    // –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    this.stats.averageConfidence = (
      (this.stats.averageConfidence * (this.stats.totalProcessed - 1) + result.confidence) /
      this.stats.totalProcessed
    );
    
    // –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    this.stats.averageProcessingTime = (
      (this.stats.averageProcessingTime * (this.stats.totalProcessed - 1) + result.processingTime) /
      this.stats.totalProcessed
    );
    
    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤
    const currentCount = this.stats.languageDistribution.get(result.language) || 0;
    this.stats.languageDistribution.set(result.language, currentCount + 1);
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —è–∑—ã–∫ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
   */
  private normalizeLanguage(language: string): 'ru' | 'en' | 'mixed' {
    switch (language.toLowerCase()) {
      case 'russian':
      case 'ru':
        return 'ru';
      case 'english':
      case 'en':
        return 'en';
      default:
        return 'mixed';
    }
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç Python –æ–∫—Ä—É–∂–µ–Ω–∏–µ
   */
  private async validateEnvironment(): Promise<void> {
    return new Promise((resolve, reject) => {
      const python = spawn(this.pythonPath, ['--version'], { stdio: 'pipe' });
      
      python.on('close', (code) => {
        if (code === 0) {
          resolve();
        } else {
          reject(new Error(`Python environment validation failed (code ${code})`));
        }
      });
      
      python.on('error', (error) => {
        reject(new Error(`Python not found: ${error.message}`));
      });
    });
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏
   */
  private async testModelLoading(): Promise<void> {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª (—Ç–∏—à–∏–Ω–∞)
    const testAudioPath = join(process.cwd(), 'temp', 'test_whisper.wav');
    
    // –ü—Ä–æ—Å—Ç–æ–π WAV —Ñ–∞–π–ª —Å —Ç–∏—à–∏–Ω–æ–π (–∑–∞–≥–æ–ª–æ–≤–æ–∫ + 1 —Å–µ–∫—É–Ω–¥–∞ —Ç–∏—à–∏–Ω—ã)
    const silentWav = Buffer.from([
      0x52, 0x49, 0x46, 0x46, 0x24, 0x08, 0x00, 0x00, 0x57, 0x41, 0x56, 0x45, 0x66, 0x6d, 0x74, 0x20,
      0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x40, 0x1f, 0x00, 0x00, 0x80, 0x3e, 0x00, 0x00,
      0x02, 0x00, 0x10, 0x00, 0x64, 0x61, 0x74, 0x61, 0x00, 0x08, 0x00, 0x00
    ]);
    
    // –î–æ–±–∞–≤–ª—è–µ–º 1 —Å–µ–∫—É–Ω–¥—É —Ç–∏—à–∏–Ω—ã (16000 —Å—ç–º–ø–ª–æ–≤ –ø–æ 2 –±–∞–π—Ç–∞)
    const silence = Buffer.alloc(32000, 0);
    const testWav = Buffer.concat([silentWav, silence]);
    
    try {
      await writeFile(testAudioPath, testWav);
      
      const result = await this.callWhisperPython(testAudioPath, "Test initialization");
      
      if (result.success) {
        console.log('‚úÖ Whisper model test successful');
      } else {
        throw new Error(result.error || 'Model test failed');
      }
      
    } finally {
      try {
        await unlink(testAudioPath);
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã
   */
  getStats() {
    return {
      ...this.stats,
      queueSize: this.processingQueue.length,
      isProcessing: this.isProcessing,
      contextSize: this.contextWindow.length,
      isInitialized: this.isInitialized
    };
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
   */
  clearContext(): void {
    this.contextWindow = [];
    console.log('üßπ Whisper context cleared');
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å
   */
  async shutdown(): Promise<void> {
    console.log('üîÑ Shutting down RealWhisperService...');
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    while (this.isProcessing) {
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
    this.processingQueue.forEach(item => {
      item.reject(new Error('Service shutting down'));
    });
    this.processingQueue = [];
    
    this.contextWindow = [];
    this.isInitialized = false;
    
    console.log('‚úÖ RealWhisperService shutdown completed');
  }
}
