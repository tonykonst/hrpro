import { SmartBuffer, TranscriptionResult } from '../../../types/v041/buffering';
import { WhisperTranscriptionService } from './WhisperTranscriptionService';
import { SmartBufferManager } from '../buffering/SmartBufferManager';

/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ - —Å–≤—è–∑—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ —Å Whisper
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É v0.41 –¥–ª—è –Ω—É–ª–µ–≤–æ–π –ø–æ—Ç–µ—Ä–∏ —Å–ª–æ–≤
 */
export class TranscriptionIntegrator {
  private whisperService: WhisperTranscriptionService;
  private bufferManager: SmartBufferManager | null = null;
  private isActive = false;
  
  // Callbacks –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  private onTranscriptionCallback?: (buffer: SmartBuffer, result: TranscriptionResult) => void;
  private onQualityUpdateCallback?: (metrics: QualityMetrics) => void;
  
  // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤—ã—Ö –±—É—Ñ–µ—Ä–æ–≤
  private processingInterval: NodeJS.Timeout | null = null;
  private readonly checkInterval = 500; // 500ms
  
  // –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
  private qualityMetrics: QualityMetrics = {
    totalBuffersProcessed: 0,
    averageConfidence: 0,
    averageProcessingTime: 0,
    wordsPreserved: 0,
    overlapQuality: 0,
    languageDistribution: new Map()
  };

  constructor() {
    this.whisperService = new WhisperTranscriptionService();
    console.log('üîó TranscriptionIntegrator initialized');
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –±—É—Ñ–µ—Ä–æ–≤
   */
  connectBufferManager(bufferManager: SmartBufferManager): void {
    this.bufferManager = bufferManager;
    console.log('üîå Buffer manager connected to transcription integrator');
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
   */
  async start(): Promise<void> {
    if (this.isActive) {
      console.log('‚ö†Ô∏è Transcription integrator already active');
      return;
    }

    if (!this.bufferManager) {
      throw new Error('Buffer manager not connected');
    }

    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Whisper
      await this.whisperService.initialize();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—É—Ñ–µ—Ä–æ–≤
      this.startBufferMonitoring();
      
      this.isActive = true;
      console.log('‚úÖ Transcription integration started');
      
    } catch (error) {
      console.error('‚ùå Failed to start transcription integration:', error);
      throw error;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
   */
  async stop(): Promise<void> {
    if (!this.isActive) return;

    console.log('üîÑ Stopping transcription integration...');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    if (this.processingInterval) {
      clearInterval(this.processingInterval);
      this.processingInterval = null;
    }
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É Whisper
    await this.whisperService.shutdown();
    
    this.isActive = false;
    console.log('‚úÖ Transcription integration stopped');
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
   */
  onTranscription(callback: (buffer: SmartBuffer, result: TranscriptionResult) => void): void {
    this.onTranscriptionCallback = callback;
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–∞—á–µ—Å—Ç–≤–∞
   */
  onQualityUpdate(callback: (metrics: QualityMetrics) => void): void {
    this.onQualityUpdateCallback = callback;
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–æ—Ç–æ–≤—ã—Ö –±—É—Ñ–µ—Ä–æ–≤
   */
  private startBufferMonitoring(): void {
    this.processingInterval = setInterval(() => {
      this.processReadyBuffers();
    }, this.checkInterval);
    
    console.log(`üëÄ Buffer monitoring started (check every ${this.checkInterval}ms)`);
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –±—É—Ñ–µ—Ä—ã
   */
  private async processReadyBuffers(): Promise<void> {
    if (!this.bufferManager) return;

    const readyBuffers = this.bufferManager.getReadyBuffers();
    const unprocessedBuffers = readyBuffers.filter(buffer => !buffer.transcription);
    
    if (unprocessedBuffers.length === 0) return;

    console.log(`üìù Processing ${unprocessedBuffers.length} ready buffers`);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
    const maxConcurrent = 2;
    const batches = this.chunkArray(unprocessedBuffers, maxConcurrent);
    
    for (const batch of batches) {
      const promises = batch.map(buffer => this.processBuffer(buffer));
      await Promise.all(promises);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä
   */
  private async processBuffer(buffer: SmartBuffer): Promise<void> {
    try {
      const startTime = Date.now();
      
      // –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –±—É—Ñ–µ—Ä
      const result = await this.whisperService.transcribe(buffer);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
      const enhancedResult = await this.enhanceTranscription(result, buffer);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±—É—Ñ–µ—Ä
      buffer.transcription = enhancedResult;
      buffer.confidence = enhancedResult.confidence;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
      this.updateQualityMetrics(buffer, enhancedResult, Date.now() - startTime);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
      if (this.onTranscriptionCallback) {
        this.onTranscriptionCallback(buffer, enhancedResult);
      }
      
      console.log(`‚úÖ Buffer transcribed: ${buffer.id} (${(enhancedResult.confidence * 100).toFixed(1)}%)`);
      
    } catch (error) {
      console.error(`‚ùå Failed to process buffer ${buffer.id}:`, error);
      
      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π
      const errorResult: TranscriptionResult = {
        text: '[Processing Error]',
        confidence: 0.0,
        wordTimestamps: [],
        language: 'en',
        isDraft: false,
        processingTime: 0
      };
      
      buffer.transcription = errorResult;
      buffer.confidence = 0.0;
    }
  }

  /**
   * –£–ª—É—á—à–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  private async enhanceTranscription(
    result: TranscriptionResult, 
    buffer: SmartBuffer
  ): Promise<TranscriptionResult> {
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å:
    // - Grammar correction (T5/mT5)
    // - Term validation
    // - Context-aware corrections
    
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return result;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
   */
  private updateQualityMetrics(
    buffer: SmartBuffer, 
    result: TranscriptionResult, 
    processingTime: number
  ): void {
    this.qualityMetrics.totalBuffersProcessed++;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    const total = this.qualityMetrics.totalBuffersProcessed;
    this.qualityMetrics.averageConfidence = (
      (this.qualityMetrics.averageConfidence * (total - 1) + result.confidence) / total
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    this.qualityMetrics.averageProcessingTime = (
      (this.qualityMetrics.averageProcessingTime * (total - 1) + processingTime) / total
    );
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (–Ω–∞ –æ—Å–Ω–æ–≤–µ word timestamps)
    this.qualityMetrics.wordsPreserved += result.wordTimestamps.length;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤
    const currentCount = this.qualityMetrics.languageDistribution.get(result.language) || 0;
    this.qualityMetrics.languageDistribution.set(result.language, currentCount + 1);
    
    // –í—ã—á–∏—Å–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π
    if (this.bufferManager) {
      const overlaps = this.bufferManager.getBufferOverlaps();
      this.qualityMetrics.overlapQuality = this.calculateOverlapQuality(overlaps);
    }
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫
    if (this.onQualityUpdateCallback) {
      this.onQualityUpdateCallback(this.qualityMetrics);
    }
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π –º–µ–∂–¥—É –±—É—Ñ–µ—Ä–∞–º–∏
   */
  private calculateOverlapQuality(overlaps: any[]): number {
    if (overlaps.length === 0) return 1.0;
    
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç
    // –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª–æ–≤ –≤ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏—Ö—Å—è –æ–±–ª–∞—Å—Ç—è—Ö
    return Math.min(1.0, overlaps.length / 10);
  }

  /**
   * –†–∞–∑–±–∏–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω–∞ —á–∞–Ω–∫–∏
   */
  private chunkArray<T>(array: T[], chunkSize: number): T[][] {
    const chunks: T[][] = [];
    for (let i = 0; i < array.length; i += chunkSize) {
      chunks.push(array.slice(i, i + chunkSize));
    }
    return chunks;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
   */
  getQualityMetrics(): QualityMetrics {
    return { ...this.qualityMetrics };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Whisper —Å–µ—Ä–≤–∏—Å–∞
   */
  getWhisperStats() {
    return this.whisperService.getStats();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
   */
  getStatus() {
    return {
      isActive: this.isActive,
      bufferManagerConnected: !!this.bufferManager,
      whisperStats: this.whisperService.getStats(),
      qualityMetrics: this.qualityMetrics
    };
  }
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
export interface QualityMetrics {
  totalBuffersProcessed: number;
  averageConfidence: number;
  averageProcessingTime: number;
  wordsPreserved: number;
  overlapQuality: number;
  languageDistribution: Map<string, number>;
}
