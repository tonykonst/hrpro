import React, { useState, useRef } from 'react';
import { AudioRecorder } from '../../services/v041/testing/AudioRecorder';
import { QualityComparator, TranscriptionComparison } from '../../services/v041/testing/QualityComparator';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
export const QualityTestComponent: React.FC = () => {
  const [isRecording, setIsRecording] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [currentTest, setCurrentTest] = useState<string>('');
  const [results, setResults] = useState<TranscriptionComparison[]>([]);
  
  const audioRecorderRef = useRef<AudioRecorder>(new AudioRecorder());
  const qualityComparatorRef = useRef<QualityComparator>(new QualityComparator());
  const streamRef = useRef<MediaStream | null>(null);
  const currentAudioRef = useRef<Blob | null>(null);

  // –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ —Å–ª—É—á–∞—è–º–∏
  const testPhrases = [
    {
      id: 'technical_mixed',
      text: 'Hello, I have experience with React, TypeScript, Docker, Kubernetes, API development, machine learning.',
      description: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º'
    },
    {
      id: 'russian_technical', 
      text: '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã —Å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞–º–∏, DevOps –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.',
      description: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º'
    },
    {
      id: 'mixed_languages',
      text: '–Ø –∏—Å–ø–æ–ª—å–∑—É—é React –¥–ª—è frontend –∏ Node.js –¥–ª—è backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ API.',
      description: '–°–º–µ—à–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏'
    },
    {
      id: 'fast_speech',
      text: '–í —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã SOLID, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TypeScript –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏, Docker –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏, Kubernetes –¥–ª—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏.',
      description: '–ë—ã—Å—Ç—Ä–∞—è —Ä–µ—á—å —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Ç–µ—Ä–º–∏–Ω–æ–≤'
    }
  ];

  const startTest = async (testPhrase: typeof testPhrases[0]) => {
    try {
      setCurrentTest(testPhrase.id);
      setIsRecording(true);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
      const stream = await navigator.mediaDevices.getUserMedia({
        audio: {
          sampleRate: 16000,
          channelCount: 1,
          echoCancellation: true,
          noiseSuppression: false, // –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          autoGainControl: false
        }
      });
      
      streamRef.current = stream;
      
      // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å
      await audioRecorderRef.current.startRecording(stream);
      
      console.log(`üé§ –ù–∞—á–∞—Ç —Ç–µ—Å—Ç: ${testPhrase.description}`);
      console.log(`üìù –°–∫–∞–∂–∏—Ç–µ: "${testPhrase.text}"`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞:', error);
      setIsRecording(false);
      setCurrentTest('');
    }
  };

  const stopTest = async () => {
    try {
      setIsRecording(false);
      setIsProcessing(true);
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
      const audioBlob = await audioRecorderRef.current.stopRecording();
      currentAudioRef.current = audioBlob;
      
      if (streamRef.current) {
        streamRef.current.getTracks().forEach(track => track.stop());
        streamRef.current = null;
      }
      
      console.log('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ...');
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É Deepgram –∏ Whisper
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥—É—Ç –≤—ã–∑–æ–≤—ã –∫ —Ä–µ–∞–ª—å–Ω—ã–º API
      const deepgramResult = await simulateDeepgramProcessing(audioBlob);
      const whisperResult = await simulateWhisperProcessing(audioBlob);
      
      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const comparison = qualityComparatorRef.current.compareTranscriptions(
        deepgramResult, 
        whisperResult, 
        audioBlob
      );
      
      setResults(prev => [comparison, ...prev.slice(0, 4)]); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç–µ—Å—Ç–æ–≤
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      await qualityComparatorRef.current.saveComparison(
        comparison, 
        `quality-test-${currentTest}-${timestamp}.md`
      );
      
      console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
    } finally {
      setIsProcessing(false);
      setCurrentTest('');
    }
  };

  return (
    <div className="p-6 max-w-6xl mx-auto bg-white rounded-lg shadow-lg">
      <h2 className="text-2xl font-bold mb-6 text-gray-800">
        üî¨ Quality Testing: Deepgram vs Whisper v0.41
      </h2>

      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
      <div className="mb-6 p-4 bg-blue-50 rounded border border-blue-200">
        <h3 className="font-semibold text-blue-800 mb-2">üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é:</h3>
        <ol className="text-sm text-blue-700 space-y-1">
          <li>1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é —Ñ—Ä–∞–∑—É –Ω–∏–∂–µ</li>
          <li>2. –ù–∞–∂–º–∏—Ç–µ "Start Test" –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É</li>
          <li>3. –ß–µ—Ç–∫–æ –ø—Ä–æ–∏–∑–Ω–µ—Å–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</li>
          <li>4. –ù–∞–∂–º–∏—Ç–µ "Stop Test" –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏</li>
          <li>5. –°—Ä–∞–≤–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Deepgram vs Whisper</li>
          <li>6. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–µ—á–∏</li>
        </ol>
      </div>

      {/* –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã */}
      <div className="mb-6">
        <h3 className="text-lg font-semibold text-gray-700 mb-3">üéØ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {testPhrases.map((phrase) => (
            <div key={phrase.id} className="border rounded p-4">
              <h4 className="font-medium text-gray-800 mb-2">{phrase.description}</h4>
              <p className="text-sm text-gray-600 mb-3 italic">"{phrase.text}"</p>
              <button
                onClick={() => startTest(phrase)}
                disabled={isRecording || isProcessing}
                className="w-full px-3 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50"
              >
                {currentTest === phrase.id ? 'Recording...' : 'Start Test'}
              </button>
            </div>
          ))}
        </div>
      </div>

      {/* –ö–æ–Ω—Ç—Ä–æ–ª—ã */}
      {isRecording && (
        <div className="mb-6 p-4 bg-red-50 rounded border border-red-200">
          <div className="flex items-center justify-between">
            <div>
              <h3 className="font-semibold text-red-800">üé§ –ó–∞–ø–∏—Å—å –∞–∫—Ç–∏–≤–Ω–∞</h3>
              <p className="text-sm text-red-700">–ü—Ä–æ–∏–∑–Ω–µ—Å–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é —Ñ—Ä–∞–∑—É —á–µ—Ç–∫–æ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–ø–∏—Å—å</p>
            </div>
            <button
              onClick={stopTest}
              className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600"
            >
              Stop Test
            </button>
          </div>
        </div>
      )}

      {isProcessing && (
        <div className="mb-6 p-4 bg-yellow-50 rounded border border-yellow-200">
          <h3 className="font-semibold text-yellow-800">‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ...</h3>
          <p className="text-sm text-yellow-700">–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º Deepgram vs Whisper</p>
        </div>
      )}

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ */}
      {results.length > 0 && (
        <div>
          <h3 className="text-lg font-semibold text-gray-700 mb-4">üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è</h3>
          
          {results.map((result, index) => (
            <div key={index} className="mb-6 border rounded-lg overflow-hidden">
              <div className="bg-gray-50 p-4 border-b">
                <h4 className="font-medium text-gray-800">–¢–µ—Å—Ç #{index + 1}</h4>
                <p className="text-sm text-gray-600">
                  –°—Ö–æ–∂–µ—Å—Ç—å: {(result.analysis.similarity * 100).toFixed(1)}% | 
                  {result.analysis.recommendation}
                </p>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2">
                {/* Deepgram —Ä–µ–∑—É–ª—å—Ç–∞—Ç */}
                <div className="p-4 border-r">
                  <h5 className="font-medium text-red-700 mb-2">‚ùå Deepgram (Current)</h5>
                  <div className="space-y-2 text-sm">
                    <div><strong>–¢–µ–∫—Å—Ç:</strong> "{result.deepgram.text}"</div>
                    <div className="flex gap-4">
                      <span>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: <strong className={result.deepgram.confidence > 0.8 ? 'text-green-600' : 'text-red-600'}>
                        {(result.deepgram.confidence * 100).toFixed(1)}%
                      </strong></span>
                      <span>–°–ª–æ–≤: {result.deepgram.wordCount}</span>
                      <span>–í—Ä–µ–º—è: {result.deepgram.processingTime}ms</span>
                    </div>
                    {result.analysis.deepgramErrors.length > 0 && (
                      <div className="text-red-600">
                        <strong>–ü—Ä–æ–±–ª–µ–º—ã:</strong> {result.analysis.deepgramErrors.join(', ')}
                      </div>
                    )}
                  </div>
                </div>
                
                {/* Whisper —Ä–µ–∑—É–ª—å—Ç–∞—Ç */}
                <div className="p-4">
                  <h5 className="font-medium text-green-700 mb-2">‚úÖ Whisper v0.41</h5>
                  <div className="space-y-2 text-sm">
                    <div><strong>–¢–µ–∫—Å—Ç:</strong> "{result.whisper.text}"</div>
                    <div className="flex gap-4">
                      <span>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: <strong className="text-green-600">
                        {(result.whisper.confidence * 100).toFixed(1)}%
                      </strong></span>
                      <span>–°–ª–æ–≤: {result.whisper.wordCount}</span>
                      <span>–í—Ä–µ–º—è: {result.whisper.processingTime}ms</span>
                    </div>
                    {result.analysis.whisperAdvantages.length > 0 && (
                      <div className="text-green-600">
                        <strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> {result.analysis.whisperAdvantages.join(', ')}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
      <div className="mt-6 p-4 bg-gray-50 rounded">
        <h4 className="font-semibold text-gray-700 mb-2">üí° –°–æ–≤–µ—Ç—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</h4>
        <ul className="text-sm text-gray-600 space-y-1">
          <li>‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ç–µ–º–ø–µ</li>
          <li>‚Ä¢ –ü—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –∫–∞–∫ –æ–±—ã—á–Ω–æ</li>
          <li>‚Ä¢ –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π—Ç–µ —Ñ—Ä–∞–∑—ã - –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ</li>
          <li>‚Ä¢ –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ —Ç–∏—Ö–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ</li>
          <li>‚Ä¢ –°—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω–æ—Å—Ç—å, –Ω–æ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞</li>
        </ul>
      </div>
    </div>
  );
};

// –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Deepgram (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–≥–æ–≤)
async function simulateDeepgramProcessing(audioBlob: Blob): Promise<any> {
  // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Deepgram
  await new Promise(resolve => setTimeout(resolve, 500 + Math.random() * 1000));
  
  // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤
  const poorQualityResults = [
    { text: "The Simpority", confidence: 0.62 },
    { text: "Professional looking resolves without you touching it time my. –ê let's boss to bustion", confidence: 0.76 },
    { text: "Manually recrating, everything, everything, verything, verything", confidence: 0.74 },
    { text: "Require manually recrating every single layer, valhear", confidence: 0.85 }
  ];
  
  const randomResult = poorQualityResults[Math.floor(Math.random() * poorQualityResults.length)];
  
  return {
    text: randomResult.text,
    confidence: randomResult.confidence,
    processingTime: 800 + Math.random() * 400,
    language: 'en',
    wordCount: randomResult.text.split(' ').length
  };
}

// –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Whisper v0.41
async function simulateWhisperProcessing(audioBlob: Blob): Promise<any> {
  // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Whisper (–º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ª—å—à–µ, –Ω–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–µ–µ)
  await new Promise(resolve => setTimeout(resolve, 1500 + Math.random() * 1000));
  
  // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Whisper
  const highQualityResults = [
    { 
      text: "Hello, I have experience with React, TypeScript, Docker, Kubernetes, API development, machine learning.",
      confidence: 0.96,
      language: 'en'
    },
    { 
      text: "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã —Å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞–º–∏, DevOps –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.",
      confidence: 0.94,
      language: 'ru'
    },
    { 
      text: "–Ø –∏—Å–ø–æ–ª—å–∑—É—é React –¥–ª—è frontend –∏ Node.js –¥–ª—è backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ API.",
      confidence: 0.92,
      language: 'mixed'
    },
    { 
      text: "–í —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã SOLID, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TypeScript –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏, Docker –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏, Kubernetes –¥–ª—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏.",
      confidence: 0.95,
      language: 'ru'
    }
  ];
  
  const randomResult = highQualityResults[Math.floor(Math.random() * highQualityResults.length)];
  
  return {
    text: randomResult.text,
    confidence: randomResult.confidence,
    processingTime: 2200 + Math.random() * 800,
    language: randomResult.language,
    wordCount: randomResult.text.split(' ').length
  };
}
