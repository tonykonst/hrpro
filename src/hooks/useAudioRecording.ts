import { useState, useCallback } from 'react';
import { configService } from '../services/config';

export interface UseAudioRecordingReturn {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  hasPermission: boolean;
  
  // –ú–µ—Ç–æ–¥—ã
  setHasPermission: (hasPermission: boolean) => void;
  
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  checkMicPermission: () => Promise<void>;
}

export const useAudioRecording = (): UseAudioRecordingReturn => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
  const [hasPermission, setHasPermission] = useState<boolean>(false);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
  const checkMicPermission = useCallback(async () => {
    try {
      console.log('üé§ [useAudioRecording] Checking microphone permission...');
      const audioConstraints = configService.getAudioConstraints();
      console.log('üîß [useAudioRecording] Audio constraints:', audioConstraints);
      const stream = await navigator.mediaDevices.getUserMedia(audioConstraints);
      console.log('‚úÖ [useAudioRecording] Microphone permission granted!');
      setHasPermission(true);
      console.log('üîÑ [useAudioRecording] hasPermission set to true');
      stream.getTracks().forEach(track => track.stop());
      console.log('üõë [useAudioRecording] Stream tracks stopped');
    } catch (error) {
      console.error('‚ùå [useAudioRecording] Microphone permission denied:', error);
      setHasPermission(false);
      console.log('üîÑ [useAudioRecording] hasPermission set to false');
    }
  }, []);

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏—è
    hasPermission,
    
    // –ú–µ—Ç–æ–¥—ã
    setHasPermission,
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    checkMicPermission
  };
};
