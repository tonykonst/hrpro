import { useState, useEffect, useRef, useCallback } from 'react';
import { SmartBufferManager } from '../../services/v041/buffering/SmartBufferManager';
import { EnhancedVAD } from '../../services/v041/buffering/EnhancedVAD';
import { TranscriptionIntegrator, QualityMetrics as TranscriptionQualityMetrics } from '../../services/v041/transcription/TranscriptionIntegrator';
import { 
  SmartBuffer, 
  BufferConfig, 
  QualityMetrics,
  VADResult,
  TranscriptionResult
} from '../../types/v041/buffering';

interface UseSmartBufferingOptions {
  config?: Partial<BufferConfig>;
  onBufferReady?: (buffer: SmartBuffer) => void;
  onTranscription?: (buffer: SmartBuffer, result: TranscriptionResult) => void;
  onQualityUpdate?: (metrics: QualityMetrics) => void;
}

interface SmartBufferingState {
  isActive: boolean;
  currentBuffer: SmartBuffer | null;
  readyBuffers: SmartBuffer[];
  qualityMetrics: QualityMetrics;
  vadStats: {
    isActive: boolean;
    averageEnergy: number;
    speechTime: number;
  };
}

/**
 * –•—É–∫ –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ —Å –Ω—É–ª–µ–≤–æ–π –ø–æ—Ç–µ—Ä–µ–π —Å–ª–æ–≤
 */
export function useSmartBuffering(options: UseSmartBufferingOptions = {}) {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  const [state, setState] = useState<SmartBufferingState>({
    isActive: false,
    currentBuffer: null,
    readyBuffers: [],
    qualityMetrics: {
      wordsPerMinute: 0,
      correctionRate: 0,
      confidenceScore: 0,
      languageSwitches: 0,
      technicalTermsDetected: 0,
      bufferOverlapQuality: 0,
      lostWordsPrevented: 0
    },
    vadStats: {
      isActive: false,
      averageEnergy: 0,
      speechTime: 0
    }
  });

  // –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–µ—Ä–≤–∏—Å—ã
  const bufferManagerRef = useRef<SmartBufferManager | null>(null);
  const vadRef = useRef<EnhancedVAD | null>(null);
  const transcriptionIntegratorRef = useRef<TranscriptionIntegrator | null>(null);
  const audioContextRef = useRef<AudioContext | null>(null);
  const streamRef = useRef<MediaStream | null>(null);
  const processorRef = useRef<ScriptProcessorNode | null>(null);
  
  // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const statsIntervalRef = useRef<NodeJS.Timeout | null>(null);

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  const initializeAudio = useCallback(async (): Promise<void> => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
      const stream = await navigator.mediaDevices.getUserMedia({
        audio: {
          sampleRate: 16000,
          channelCount: 1,
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: false
        }
      });

      streamRef.current = stream;

      // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      const AudioContextClass = window.AudioContext || (window as any).webkitAudioContext;
      const audioContext = new AudioContextClass({
        sampleRate: 16000
      });
      audioContextRef.current = audioContext;

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º VAD
      const vad = new EnhancedVAD(audioContext, stream);
      vadRef.current = vad;

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±—É—Ñ–µ—Ä–æ–≤
      const config: BufferConfig = {
        baseWindowSize: 30,
        overlapSize: 8,
        adaptToSpeechRate: true,
        extendOnActiveSpeech: true,
        silenceThreshold: 0.5,
        energyThreshold: 0.1,
        preSpeechBuffer: 0.5,
        postSpeechBuffer: 1.0,
        ...options.config
      };

      const bufferManager = new SmartBufferManager(config, audioContext);
      bufferManagerRef.current = bufferManager;

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
      const transcriptionIntegrator = new TranscriptionIntegrator();
      transcriptionIntegratorRef.current = transcriptionIntegrator;
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±—É—Ñ–µ—Ä–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä—É
      transcriptionIntegrator.connectBufferManager(bufferManager);
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º callbacks
      if (options.onTranscription) {
        transcriptionIntegrator.onTranscription(options.onTranscription);
      }
      
      transcriptionIntegrator.onQualityUpdate((metrics) => {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        const convertedMetrics: QualityMetrics = {
          wordsPerMinute: 0,
          correctionRate: 0,
          confidenceScore: metrics.averageConfidence,
          languageSwitches: 0,
          technicalTermsDetected: 0,
          bufferOverlapQuality: metrics.overlapQuality,
          lostWordsPrevented: metrics.wordsPreserved
        };
        
        if (options.onQualityUpdate) {
          options.onQualityUpdate(convertedMetrics);
        }
      });

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∫—É (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–º–æ)
      const source = audioContext.createMediaStreamSource(stream);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º AnalyserNode –¥–ª—è –¥–µ–º–æ (–±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ)
      const analyser = audioContext.createAnalyser();
      analyser.fftSize = 2048;
      source.connect(analyser);
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª
      const processingInterval = setInterval(() => {
        const dataArray = new Uint8Array(analyser.frequencyBinCount);
        analyser.getByteFrequencyData(dataArray);
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Float32Array –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        const audioData = new Float32Array(dataArray.length);
        for (let i = 0; i < dataArray.length; i++) {
          audioData[i] = (dataArray[i] - 128) / 128.0;
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é VAD
        const vadResult = vad.analyze(audioData);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
        bufferManager.addAudioChunk(audioData, vadResult);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        updateVADStats(vadResult);
      }, 100); // –ö–∞–∂–¥—ã–µ 100ms
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
      processorRef.current = { disconnect: () => clearInterval(processingInterval) } as any;

      console.log('üéØ Smart buffering audio initialized');
    } catch (error) {
      console.error('‚ùå Failed to initialize smart buffering:', error);
      throw error;
    }
  }, [options.config]);

  /**
   * –ù–∞—á–∏–Ω–∞–µ—Ç —É–º–Ω—É—é –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é
   */
  const startBuffering = useCallback(async (): Promise<void> => {
    if (!bufferManagerRef.current) {
      await initializeAudio();
    }

    if (bufferManagerRef.current && audioContextRef.current) {
      if (audioContextRef.current.state === 'suspended') {
        await audioContextRef.current.resume();
      }

      bufferManagerRef.current.startBuffering();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
      if (transcriptionIntegratorRef.current) {
        await transcriptionIntegratorRef.current.start();
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      statsIntervalRef.current = setInterval(updateStats, 1000);

      setState(prev => ({ ...prev, isActive: true }));
      console.log('‚ñ∂Ô∏è Smart buffering started');
    }
  }, [initializeAudio]);

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É–º–Ω—É—é –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é
   */
  const stopBuffering = useCallback(async (): Promise<void> => {
    if (bufferManagerRef.current) {
      bufferManagerRef.current.stopBuffering();
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    if (transcriptionIntegratorRef.current) {
      await transcriptionIntegratorRef.current.stop();
    }

    if (statsIntervalRef.current) {
      clearInterval(statsIntervalRef.current);
      statsIntervalRef.current = null;
    }

    setState(prev => ({ ...prev, isActive: false }));
    console.log('‚èπÔ∏è Smart buffering stopped');
  }, []);

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É VAD
   */
  const updateVADStats = useCallback((vadResult: VADResult): void => {
    if (!vadRef.current) return;

    const stats = vadRef.current.getStats();
    setState(prev => ({
      ...prev,
      vadStats: {
        isActive: stats.isActive,
        averageEnergy: stats.averageEnergy,
        speechTime: stats.speechTime
      }
    }));
  }, []);

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  const updateStats = useCallback((): void => {
    if (!bufferManagerRef.current) return;

    const readyBuffers = bufferManagerRef.current.getReadyBuffers();
    
    setState(prev => ({
      ...prev,
      readyBuffers,
      qualityMetrics: {
        ...prev.qualityMetrics,
        bufferOverlapQuality: calculateOverlapQuality(readyBuffers)
      }
    }));

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≥–æ—Ç–æ–≤—ã—Ö –±—É—Ñ–µ—Ä–∞—Ö
    if (options.onBufferReady) {
      readyBuffers.forEach(buffer => {
        if (!buffer.transcription) { // –ù–æ–≤—ã–π –±—É—Ñ–µ—Ä
          options.onBufferReady!(buffer);
        }
      });
    }
  }, [options.onBufferReady]);

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π
   */
  const calculateOverlapQuality = useCallback((buffers: SmartBuffer[]): number => {
    if (buffers.length < 2) return 1.0;

    let totalOverlap = 0;
    let validOverlaps = 0;

    for (const buffer of buffers) {
      if (buffer.overlapWith.length > 0) {
        totalOverlap += buffer.overlapWith.length;
        validOverlaps++;
      }
    }

    return validOverlaps > 0 ? Math.min(1.0, totalOverlap / validOverlaps / 2) : 1.0;
  }, []);

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏
   */
  const updateConfig = useCallback((newConfig: Partial<BufferConfig>): void => {
    if (bufferManagerRef.current) {
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
      console.log('üîß Buffer config updated:', newConfig);
    }
  }, []);

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ VAD
   */
  const setVADSensitivity = useCallback((energy: number, spectral: number, preSpeech: number): void => {
    if (vadRef.current) {
      vadRef.current.setSensitivity(energy, spectral, preSpeech);
    }
  }, []);

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  const getDetailedStats = useCallback(() => {
    if (!bufferManagerRef.current || !vadRef.current) {
      return null;
    }

    return {
      bufferManager: {
        activeBuffers: bufferManagerRef.current.activeBuffers,
        currentBufferDuration: bufferManagerRef.current.currentBufferDuration,
        totalProcessedTime: bufferManagerRef.current.totalProcessedTime
      },
      vad: vadRef.current.getStats(),
      overlaps: bufferManagerRef.current.getBufferOverlaps()
    };
  }, []);

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (statsIntervalRef.current) {
        clearInterval(statsIntervalRef.current);
      }
      
      if (processorRef.current && typeof processorRef.current.disconnect === 'function') {
        processorRef.current.disconnect();
      }
      
      if (streamRef.current) {
        streamRef.current.getTracks().forEach(track => track.stop());
      }
      
      if (audioContextRef.current) {
        audioContextRef.current.close();
      }
    };
  }, []);

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    ...state,
    
    // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    startBuffering,
    stopBuffering,
    updateConfig,
    setVADSensitivity,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    getDetailedStats,
    
    // –°—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    isInitialized: !!bufferManagerRef.current
  };
}
