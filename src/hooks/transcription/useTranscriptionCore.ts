import { useCallback } from 'react';
import { ITranscriptionService } from '../../types/ITranscriptionService';
import { ClaudeAnalysisService, AnalysisContext, createClaudeService } from '../../services/claude';
import { TranscriptionServiceFactory } from '../../services/transcription/TranscriptionServiceFactory';
import { configService } from '../../services/config';
import { PostEditorConfig, CorrectionContext } from '../../services/post-editor';
import { TranscriptEvent } from '../../services/deepgram';

/**
 * Core transcription functionality
 * 
 * @example
 * ```tsx
 * const core = useTranscriptionCore({
 *   deepgramRef,
 *   claudeRef,
 *   analysisContextRef,
 *   cleanupRef,
 *   handleTranscriptEvent
 * });
 * ```
 */
interface UseTranscriptionCoreProps {
  deepgramRef: React.MutableRefObject<ITranscriptionService | null>;
  claudeRef: React.MutableRefObject<ClaudeAnalysisService | null>;
  analysisContextRef: React.MutableRefObject<AnalysisContext | null>;
  cleanupRef: React.MutableRefObject<(() => void) | null>;
  handleTranscriptEvent: (event: TranscriptEvent) => Promise<void>;
}

export const useTranscriptionCore = ({
  deepgramRef,
  claudeRef,
  analysisContextRef,
  cleanupRef,
  handleTranscriptEvent
}: UseTranscriptionCoreProps) => {

  /**
   * Connect to Deepgram service
   */
  const connectToDeepgram = useCallback(async (): Promise<() => void> => {
    console.log('üîó [useTranscription] [DEEPGRAM] Starting Deepgram connection...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ electronAPI
    await configService.getConfigWithEnv();
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ dev —Ä–µ–∂–∏–º–µ
    if (configService.isDevelopment) {
      console.log('üîß [DEEPGRAM] Development mode - logging config...');
      configService.logConfig();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Deepgram
    if (!configService.isDeepgramConfigured()) {
      throw new Error('‚ùå [DEEPGRAM] API key not configured! Please add DEEPGRAM_API_KEY to .env file');
    }
    
    console.log('‚úÖ [DEEPGRAM] API key configured, proceeding with real connection...');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Claude —Å–µ—Ä–≤–∏—Å –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if (configService.isClaudeConfigured()) {
      try {
        const claudeConfig = configService.getClaudeConfig();
        claudeRef.current = createClaudeService(claudeConfig);
        analysisContextRef.current = new AnalysisContext();
        console.log('‚úÖ Claude service initialized:', {
          model: claudeConfig.model,
          maxTokens: claudeConfig.maxTokens,
          temperature: claudeConfig.temperature
        });
      } catch (error) {
        console.warn('‚ö†Ô∏è Claude service failed to initialize:', error);
      }
    } else {
      console.log('‚ö†Ô∏è Claude API key not configured, insights will be limited...');
    }

    try {
      console.log('üì° [DEEPGRAM] Connecting to real Deepgram...');
      
      const deepgramConfig = configService.getDeepgramConfig();
      console.log('üîß [DEEPGRAM] Using config:', {
        model: deepgramConfig.model,
        language: deepgramConfig.language,
        interim_results: deepgramConfig.interim_results,
        endpointing: deepgramConfig.endpointing
      });
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ—Å—Ç—Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
      let postEditorConfig: PostEditorConfig | undefined;
      let correctionContext: CorrectionContext | undefined;
      
      if (configService.isPostEditorConfigured()) {
        postEditorConfig = configService.getPostEditorConfig();
        correctionContext = {
          jobTerms: [],
          synonymDictionary: {}
        };
        console.log('üîß Post-editor enabled:', {
          model: postEditorConfig.model,
          timeout: postEditorConfig.timeoutMs
        });
      } else {
        console.log('‚ö†Ô∏è Post-editor not configured, skipping...');
      }
      
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
      const deepgram = TranscriptionServiceFactory.create({
        provider: 'deepgram',
        apiKey: deepgramConfig.apiKey,
        onTranscript: handleTranscriptEvent,
        onError: (error: string) => {
          console.error('‚ùå [DEEPGRAM] Error:', error);
        }
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–µ—Ä–≤–∏—Å
      deepgramRef.current = deepgram;
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Deepgram
      await deepgram.connect();
      
      console.log('‚úÖ [DEEPGRAM] Connected successfully!');
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏
      const cleanup = () => {
        console.log('üßπ [DEEPGRAM] Cleaning up connection...');
        if (deepgramRef.current) {
          deepgramRef.current.disconnect();
          deepgramRef.current = null;
        }
        if (claudeRef.current) {
          claudeRef.current = null;
        }
        if (analysisContextRef.current) {
          analysisContextRef.current = null;
        }
      };
      
      cleanupRef.current = cleanup;
      return cleanup;
      
    } catch (error) {
      console.error('‚ùå [DEEPGRAM] Connection failed:', error);
      throw error;
    }
  }, [deepgramRef, claudeRef, analysisContextRef, cleanupRef, handleTranscriptEvent]);

  return {
    connectToDeepgram
  };
};
