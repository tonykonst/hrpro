import { app, BrowserWindow, globalShortcut, ipcMain, screen, desktopCapturer } from 'electron';
import { join } from 'path';
import * as path from 'path';

let controlPanelWindow: BrowserWindow | null = null;
let dataWindow: BrowserWindow | null = null;

// –û—á–µ—Ä–µ–¥—å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞
let pendingTranscriptData: any[] = [];
let pendingInsightsData: any[] = [];
let pendingRecordingStateData: any[] = [];

function createControlPanelWindow() {
  // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞ - —Ä–∞–∑–º–µ—Ä –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
  const windowOptions = {
    width: 200,          // –ù–∞—á–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞
    height: 56,          // –ù–∞—á–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ (—Ç–æ—á–Ω–æ –ø–æ –ø–∞–Ω–µ–ª–∏)
    minWidth: 100,       // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞
    minHeight: 56,       // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞
    maxWidth: 800,       // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞
    maxHeight: 120,      // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞
    useContentSize: true, // –†–∞–∑–º–µ—Ä –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
    frame: false,
    transparent: true,
    backgroundColor: '#00000000',
    hasShadow: false,
    alwaysOnTop: true,
    skipTaskbar: true,
    resizable: true,     // –†–∞–∑—Ä–µ—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
    webPreferences: {
      nodeIntegration: false,       // ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û
      contextIsolation: true,       // ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û
      backgroundThrottling: false,
      enableRemoteModule: false,
      webSecurity: true,            // ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û
      preload: path.join(__dirname, '..', 'preload', 'preload.js') // ‚úÖ PRELOAD
    }
  };

  controlPanelWindow = new BrowserWindow(windowOptions);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  controlPanelWindow.loadURL('http://localhost:5173?window=control');
  
  // –û—Ç–∫—Ä—ã–≤–∞–µ–º DevTools –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ
  controlPanelWindow.webContents.openDevTools({ mode: 'detach' });
  
  controlPanelWindow.webContents.on('did-fail-load', () => {
    console.log('Failed to load Control Panel, retrying...');
    setTimeout(() => {
      controlPanelWindow?.loadURL('http://localhost:5173?window=control');
    }, 1000);
  });

  // –°–æ–±—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  controlPanelWindow.on('closed', () => {
    controlPanelWindow = null;
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ
    if (dataWindow) {
      dataWindow.close();
    }
  });

  controlPanelWindow.webContents.on('did-finish-load', () => {
    console.log('Control Panel loaded successfully');
  });
}

function createDataWindow() {
  console.log('üöÄ [MAIN] Creating data window...');
  
  if (dataWindow && !dataWindow.isDestroyed()) {
    console.log('‚úÖ [MAIN] Data window already exists, showing it');
    dataWindow.show();
    dataWindow.focus();
    return;
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ - –¢–û–ß–ù–û –ö–ê–ö –£ –ü–ê–ù–ï–õ–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø
  const dataWindowOptions = {
    width: 600,
    height: 400,
    minWidth: 400,
    minHeight: 300,
    useContentSize: true,           // ‚úÖ –†–ê–ó–ú–ï–† –ü–û –°–û–î–ï–†–ñ–ò–ú–û–ú–£
    frame: false,                   // ‚úÖ –ë–ï–ó –°–ò–°–¢–ï–ú–ù–û–ô –†–ê–ú–ö–ò
    transparent: true,              // ‚úÖ –ü–û–õ–£–ü–†–û–ó–†–ê–ß–ù–û–ï
    backgroundColor: '#00000000',   // ‚úÖ –ü–†–û–ó–†–ê–ß–ù–´–ô –§–û–ù
    hasShadow: false,               // ‚úÖ –ë–ï–ó –¢–ï–ù–ò (–∫–∞–∫ —É –ø–∞–Ω–µ–ª–∏)
    alwaysOnTop: true,
    skipTaskbar: true,              // ‚úÖ –ù–ï –í –ü–ê–ù–ï–õ–ò –ó–ê–î–ê–ß (–∫–∞–∫ —É –ø–∞–Ω–µ–ª–∏)
    resizable: true,
    show: false,                    // ‚úÖ –ù–ï –ü–û–ö–ê–ó–´–í–ê–¢–¨ –°–†–ê–ó–£
    webPreferences: {
      nodeIntegration: false,       // ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û
      contextIsolation: true,       // ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û
      backgroundThrottling: false,
      enableRemoteModule: false,
      webSecurity: true,            // ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û
      preload: path.join(__dirname, '..', 'preload', 'preload.js') // ‚úÖ PRELOAD
    }
  };

  console.log('üîß [MAIN] Creating BrowserWindow with options:', dataWindowOptions);
  dataWindow = new BrowserWindow(dataWindowOptions);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–∫–Ω–æ —Å –¥–∞–Ω–Ω—ã–º–∏
  console.log('üì° [MAIN] Loading URL: http://localhost:5173?window=data');
  dataWindow.loadURL('http://localhost:5173?window=data');

  // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ä—è–¥–æ–º —Å –ø–∞–Ω–µ–ª—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  if (controlPanelWindow) {
    const panelBounds = controlPanelWindow.getBounds();
    console.log('üìç [MAIN] Positioning data window next to control panel:', panelBounds);
    // –†–∞–∑–º–µ—â–∞–µ–º –æ–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥ –ø–∞–Ω–µ–ª—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    dataWindow.setPosition(panelBounds.x, panelBounds.y + panelBounds.height + 10);
  } else {
    console.log('üìç [MAIN] No control panel found, using default position');
    dataWindow.setPosition(100, 100);
  }

  // –°–æ–±—ã—Ç–∏—è –æ–∫–Ω–∞ –¥–∞–Ω–Ω—ã—Ö
  dataWindow.on('closed', () => {
    console.log('‚ùå [MAIN] Data window closed');
    dataWindow = null;
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –æ–∫–Ω–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  dataWindow.on('close', (event) => {
    console.log('üö™ [MAIN] Data window close event triggered');
    console.log('üö™ [MAIN] Close event preventDefault available:', typeof event.preventDefault === 'function');
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞
    console.log('üõ°Ô∏è [MAIN] Preventing data window close with preventDefault');
    event.preventDefault();
    
    // –í–º–µ—Å—Ç–æ –∑–∞–∫—Ä—ã—Ç–∏—è - —Å–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
    if (dataWindow && !dataWindow.isDestroyed()) {
      console.log('üëÅÔ∏è [MAIN] Hiding data window instead of closing');
      dataWindow.hide();
    }
  });

  dataWindow.on('closed', () => {
    console.log('üö™ [MAIN] Data window closed event (duplicate handler)');
  });

  dataWindow.on('unresponsive', () => {
    console.log('‚ö†Ô∏è [MAIN] Data window became unresponsive');
  });

  dataWindow.on('responsive', () => {
    console.log('‚úÖ [MAIN] Data window became responsive');
  });

  dataWindow.on('ready-to-show', () => {
    console.log('‚úÖ [MAIN] Data window ready to show');
    if (dataWindow) {
      dataWindow.show();
      dataWindow.focus();
      console.log('üëÅÔ∏è [MAIN] Data window should be visible now');
    }
  });

  dataWindow.webContents.on('did-finish-load', () => {
    console.log('üìÑ [MAIN] Data window content loaded successfully');
    if (dataWindow) {
      console.log('üëÅÔ∏è [MAIN] Showing data window after content load');
      dataWindow.show();
      dataWindow.focus();
      
      // –í–∫–ª—é—á–∞–µ–º DevTools –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ renderer process
      if (process.env.NODE_ENV === 'development') {
        console.log('üîß [MAIN] Opening DevTools for data window');
        dataWindow.webContents.openDevTools();
      }
    }
  });

  dataWindow.webContents.on('did-fail-load', (event, errorCode, errorDescription) => {
    console.error('‚ùå [MAIN] Data window failed to load:', errorCode, errorDescription);
  });

  console.log('üéØ [MAIN] Data window creation completed');
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞
  processPendingData();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –¥–∞–Ω–Ω—ã—Ö
function processPendingData() {
  if (!dataWindow || dataWindow.isDestroyed()) {
    return;
  }
  
  console.log('üì¶ [MAIN] Processing pending data:', {
    transcript: pendingTranscriptData.length,
    insights: pendingInsightsData.length,
    recordingState: pendingRecordingStateData.length
  });
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
  pendingTranscriptData.forEach(data => {
    console.log('üì¶ [MAIN] Sending pending transcript:', data);
    dataWindow!.webContents.send('transcript-update', data);
  });
  pendingTranscriptData = [];
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å–∞–π—Ç–æ–≤
  pendingInsightsData.forEach(data => {
    console.log('üì¶ [MAIN] Sending pending insights:', data);
    dataWindow!.webContents.send('insights-update', data);
  });
  pendingInsightsData = [];
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø–∏—Å–∏
  pendingRecordingStateData.forEach(data => {
    console.log('üì¶ [MAIN] Sending pending recording state:', data);
    dataWindow!.webContents.send('recording-state-change', data);
  });
  pendingRecordingStateData = [];
}

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
function registerGlobalShortcuts() {
  // Ctrl/Cmd + \ –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  globalShortcut.register('CommandOrControl+\\', () => {
    if (controlPanelWindow) {
      if (controlPanelWindow.isVisible()) {
        controlPanelWindow.hide();
        if (dataWindow) dataWindow.hide();
      } else {
        controlPanelWindow.show();
        controlPanelWindow.focus();
        if (dataWindow) dataWindow.show();
      }
    }
  });

  console.log('Global shortcuts registered');
}

// IPC handlers –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–∞–º–∏
function setupIPC() {
  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏ —Ä–∞–∑–º–µ—Ä –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  ipcMain.handle('get-window-bounds', () => {
    if (!controlPanelWindow) return null;
    return controlPanelWindow.getBounds();
  });

  // –°–æ–∑–¥–∞—Ç—å –æ–∫–Ω–æ —Å –¥–∞–Ω–Ω—ã–º–∏
  ipcMain.handle('create-data-window', () => {
    console.log('üì° [IPC] Received create-data-window request');
    try {
      createDataWindow();
      console.log('‚úÖ [IPC] Data window creation initiated');
      // –£–≤–µ–¥–æ–º–ª—è–µ–º renderer –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–∫–Ω–∞
      if (controlPanelWindow) {
        controlPanelWindow.webContents.send('window-created', 'data');
        console.log('üì§ [IPC] Sent window-created event to control panel');
      }
      return { success: true, message: 'Data window creation initiated' };
    } catch (error) {
      console.error('‚ùå [IPC] Failed to create data window:', error);
      return { success: false, error: error instanceof Error ? error.message : String(error) };
    }
  });

  // –°–∫—Ä—ã—Ç—å –æ–∫–Ω–æ —Å –¥–∞–Ω–Ω—ã–º–∏ (–ù–ï –∑–∞–∫—Ä—ã–≤–∞—Ç—å!)
  ipcMain.handle('close-data-window', () => {
    console.log('üëÅÔ∏è [IPC] Hiding data window instead of closing');
    if (dataWindow && !dataWindow.isDestroyed()) {
      dataWindow.hide(); // ‚Üê –°–ö–†–´–í–ê–ï–ú –≤–º–µ—Å—Ç–æ –∑–∞–∫—Ä—ã—Ç–∏—è!
      console.log('‚úÖ [IPC] Data window hidden successfully');
      // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º dataWindow = null - –æ–∫–Ω–æ –æ—Å—Ç–∞–µ—Ç—Å—è –∂–∏–≤—ã–º!
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º renderer –æ —Å–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞
      if (controlPanelWindow) {
        controlPanelWindow.webContents.send('window-closed', 'data');
        console.log('üì§ [IPC] Sent window-closed event to control panel');
      }
    }
  });

  // –ü–µ—Ä–µ–¥–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤ –æ–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö
  ipcMain.handle('send-transcript', (event, data) => {
    console.log('üìù [IPC] Sending transcript to data window:', data);
    console.log('üìù [IPC] Data window exists:', !!dataWindow);
    console.log('üìù [IPC] Data window isDestroyed:', dataWindow?.isDestroyed());
    
    try {
      if (dataWindow && !dataWindow.isDestroyed()) {
        console.log('üìù [IPC] Sending transcript-update event to data window');
        dataWindow.webContents.send('transcript-update', data);
        console.log('‚úÖ [IPC] Transcript sent successfully');
      } else {
        console.log('üì¶ [IPC] Data window not available, adding to pending queue');
        pendingTranscriptData.push(data);
        console.log('üì¶ [IPC] Pending transcript queue size:', pendingTranscriptData.length);
      }
    } catch (error) {
      console.error('‚ùå [IPC] Failed to send transcript:', error);
    }
  });

  // –ü–µ—Ä–µ–¥–∞—Ç—å –∏–Ω—Å–∞–π—Ç—ã –≤ –æ–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö
  ipcMain.handle('send-insights', (event, insights) => {
    console.log('ü§ñ [IPC] Sending insights to data window:', insights);
    
    try {
      if (dataWindow && !dataWindow.isDestroyed()) {
        dataWindow.webContents.send('insights-update', insights);
        console.log('‚úÖ [IPC] Insights sent successfully');
      } else {
        console.log('üì¶ [IPC] Data window not available, adding to pending queue');
        pendingInsightsData.push(insights);
        console.log('üì¶ [IPC] Pending insights queue size:', pendingInsightsData.length);
      }
    } catch (error) {
      console.error('‚ùå [IPC] Failed to send insights:', error);
    }
  });

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø–∏—Å–∏
  ipcMain.handle('send-recording-state', (event, isRecording) => {
    console.log('üé§ [IPC] Sending recording state change:', isRecording);
    
    try {
      if (dataWindow && !dataWindow.isDestroyed()) {
        dataWindow.webContents.send('recording-state-change', isRecording);
        console.log('‚úÖ [IPC] Recording state sent successfully');
      } else {
        console.log('üì¶ [IPC] Data window not available, adding to pending queue');
        pendingRecordingStateData.push(isRecording);
        console.log('üì¶ [IPC] Pending recording state queue size:', pendingRecordingStateData.length);
      }
    } catch (error) {
      console.error('‚ùå [IPC] Failed to send recording state:', error);
    }
  });

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–ø–ª–µ–µ
  ipcMain.handle('get-display-info', () => {
    const displays = screen.getAllDisplays();
    const primaryDisplay = screen.getPrimaryDisplay();
    return { displays, primaryDisplay };
  });

  // –ó–∞—Ö–≤–∞—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω
  ipcMain.handle('capture-screen', async () => {
    try {
      const sources = await desktopCapturer.getSources({
        types: ['screen'],
        thumbnailSize: { width: 1920, height: 1080 }
      });
      
      if (sources.length > 0) {
        return sources[0].thumbnail.toDataURL();
      }
      return null;
    } catch (error) {
      console.error('Screen capture failed:', error);
      return null;
    }
  });
}

// –°–æ–±—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.whenReady().then(() => {
  createControlPanelWindow();
  registerGlobalShortcuts();
  setupIPC();
  
  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
      createControlPanelWindow();
    }
  });
});

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('before-quit', () => {
  // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
  globalShortcut.unregisterAll();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});