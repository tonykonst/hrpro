import { app } from 'electron';
import { config } from 'dotenv';
import { WindowManager } from './windows/WindowManager';
import { IPCHandlers } from './ipc/IPCHandlers';
import { AppLifecycle } from './lifecycle/AppLifecycle';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
config();

/**
 * Main Electron process entry point
 * 
 * This file coordinates the application initialization and manages
 * the main process lifecycle.
 */
class MainProcess {
  private windowManager: WindowManager;
  private ipcHandlers: IPCHandlers;
  private appLifecycle: AppLifecycle;

  constructor() {
    this.windowManager = new WindowManager();
    this.ipcHandlers = new IPCHandlers(this.windowManager);
    this.appLifecycle = new AppLifecycle(this.windowManager);
  }

  /**
   * Initialize the application
   */
  async initialize(): Promise<void> {
    console.log('üöÄ [MAIN] Starting Interview Assistant...');

    // Setup application lifecycle
    this.appLifecycle.setup();

    // Setup IPC handlers
    this.ipcHandlers.setup();

    // Create control panel window
    this.createControlPanelWindow();

    console.log('‚úÖ [MAIN] Application initialized successfully');
  }

  /**
   * Create and setup control panel window
   */
  private createControlPanelWindow(): void {
    const controlPanelWindow = this.windowManager.createControlPanelWindow();

    // DevTools –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ development —Ä–µ–∂–∏–º–µ
    if (process.env.NODE_ENV === 'development') {
      controlPanelWindow.webContents.once('did-finish-load', () => {
        console.log('üîß Opening DevTools for control panel');
        controlPanelWindow.webContents.openDevTools({ mode: 'detach' });
      });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è data window
    controlPanelWindow.webContents.on('did-finish-load', () => {
      console.log('üì± Control panel loaded');
    });
  }

  /**
   * Cleanup resources
   */
  cleanup(): void {
    console.log('üßπ [MAIN] Cleaning up resources...');
    this.appLifecycle.cleanup();
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
const mainProcess = new MainProcess();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (error) => {
  console.error('‚ùå [MAIN] Uncaught Exception:', error);
  mainProcess.cleanup();
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå [MAIN] Unhandled Rejection at:', promise, 'reason:', reason);
  mainProcess.cleanup();
  process.exit(1);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–æ–≥–¥–∞ Electron –≥–æ—Ç–æ–≤
app.whenReady().then(async () => {
  try {
    await mainProcess.initialize();
  } catch (error) {
    console.error('‚ùå [MAIN] Failed to initialize application:', error);
    app.quit();
  }
});

// Cleanup –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
app.on('before-quit', () => {
  mainProcess.cleanup();
});