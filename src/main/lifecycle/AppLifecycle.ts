import { app, globalShortcut } from 'electron';

/**
 * Application lifecycle management
 * 
 * @example
 * ```tsx
 * const appLifecycle = new AppLifecycle(windowManager);
 * appLifecycle.setup();
 * ```
 */
export class AppLifecycle {
  private windowManager: any; // WindowManager type
  private isQuitting = false;

  constructor(windowManager: any) {
    this.windowManager = windowManager;
  }

  /**
   * Setup application lifecycle handlers
   */
  setup(): void {
    this.setupAppEvents();
    this.setupGlobalShortcuts();
  }

  /**
   * Setup application events
   */
  private setupAppEvents(): void {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.on('before-quit', (event) => {
      console.log('üîÑ [APP] before-quit event triggered');
      this.isQuitting = true;
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º DevTools –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã
      const controlPanelWindow = this.windowManager.getControlPanelWindow();
      const dataWindow = this.windowManager.getDataWindow();
      
      if (controlPanelWindow && !controlPanelWindow.isDestroyed()) {
        controlPanelWindow.webContents.closeDevTools();
      }
      if (dataWindow && !dataWindow.isDestroyed()) {
        dataWindow.webContents.closeDevTools();
      }
    });

    app.on('will-quit', (event) => {
      console.log('üîÑ [APP] will-quit event triggered');
      
      // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      event.preventDefault();
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ–∫–Ω–∞
      this.windowManager.closeAllWindows();
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
      setTimeout(() => {
        app.exit(0);
      }, 100);
    });

    app.on('window-all-closed', () => {
      console.log('üîÑ [APP] window-all-closed event triggered');
      
      // –ù–∞ macOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ–±—ã—á–Ω–æ –æ—Å—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –¥–∞–∂–µ –∫–æ–≥–¥–∞ –≤—Å–µ –æ–∫–Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã
      if (process.platform !== 'darwin') {
        app.quit();
      }
    });

    app.on('activate', () => {
      console.log('üîÑ [APP] activate event triggered');
      
      // –ù–∞ macOS –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –∫–æ–≥–¥–∞ –∏–∫–æ–Ω–∫–∞ –≤ –¥–æ–∫–µ –Ω–∞–∂–∞—Ç–∞
      if (this.windowManager.getControlPanelWindow() === null) {
        this.windowManager.createControlPanelWindow();
      }
    });
  }

  /**
   * Setup global shortcuts
   */
  private setupGlobalShortcuts(): void {
    // Ctrl/Cmd + \ –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    globalShortcut.register('CommandOrControl+\\', () => {
      const controlPanelWindow = this.windowManager.getControlPanelWindow();
      const dataWindow = this.windowManager.getDataWindow();
      
      if (controlPanelWindow) {
        if (controlPanelWindow.isVisible()) {
          controlPanelWindow.hide();
          if (dataWindow) dataWindow.hide();
        } else {
          controlPanelWindow.show();
          controlPanelWindow.focus();
          if (dataWindow) dataWindow.show();
        }
      }
    });

    console.log('‚úÖ Global shortcuts registered');
  }

  /**
   * Cleanup resources
   */
  cleanup(): void {
    // –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
    globalShortcut.unregisterAll();
    console.log('üßπ Global shortcuts unregistered');
  }

  /**
   * Check if app is quitting
   */
  isAppQuitting(): boolean {
    return this.isQuitting;
  }
}
