import { contextBridge, ipcRenderer } from 'electron';

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π API –¥–ª—è renderer –ø—Ä–æ—Ü–µ—Å—Å–∞
contextBridge.exposeInMainWorld('electronAPI', {
  // –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã (–ø–æ–∫–∞ –±–µ–∑ IPC handlers)
  getConfig: () => Promise.resolve({ 
    audio: { sampleRate: 16000 }, 
    ui: { theme: 'dark' },
    // –ü–µ—Ä–µ–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ preload
    env: {
      DEEPGRAM_API_KEY: process.env.DEEPGRAM_API_KEY || '',
      CLAUDE_API_KEY: process.env.CLAUDE_API_KEY || '',
      OPENAI_API_KEY: process.env.OPENAI_API_KEY || '',
      POST_EDITOR_API_KEY: process.env.POST_EDITOR_API_KEY || '',
      NODE_ENV: process.env.NODE_ENV || 'development'
    }
  }),
  sendTranscript: (data: any) => {
    console.log('üì§ [Preload] Sending transcript via IPC:', data);
    return ipcRenderer.invoke('send-transcript', data);
  },
  sendInsights: (data: any) => {
    console.log('üì§ [Preload] Sending insights via IPC:', data);
    return ipcRenderer.invoke('send-insights', data);
  },
  sendRecordingState: (data: any) => {
    console.log('üì§ [Preload] Sending recording state via IPC:', data);
    return ipcRenderer.invoke('send-recording-state', data);
  },
  createDataWindow: () => ipcRenderer.invoke('create-data-window'),
  closeDataWindow: () => ipcRenderer.invoke('close-data-window'),
  
  // –°–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
  onTranscriptUpdate: (callback: (data: any) => void) => {
    console.log('üì° [Preload] onTranscriptUpdate registered');
    const handler = (event: any, data: any) => {
      console.log('üìù [Preload] Received transcript-update:', data);
      callback(data);
    };
    ipcRenderer.on('transcript-update', handler);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    return () => {
      ipcRenderer.removeListener('transcript-update', handler);
    };
  },
  onInsightsUpdate: (callback: (data: any) => void) => {
    console.log('üì° [Preload] onInsightsUpdate registered');
    const handler = (event: any, data: any) => {
      console.log('ü§ñ [Preload] Received insights-update:', data);
      callback(data);
    };
    ipcRenderer.on('insights-update', handler);
    
    return () => {
      ipcRenderer.removeListener('insights-update', handler);
    };
  },
  onRecordingStateChange: (callback: (data: any) => void) => {
    console.log('üì° [Preload] onRecordingStateChange registered');
    const handler = (event: any, data: any) => {
      console.log('üé§ [Preload] Received recording-state-change:', data);
      callback(data);
    };
    ipcRenderer.on('recording-state-change', handler);
    
    return () => {
      ipcRenderer.removeListener('recording-state-change', handler);
    };
  },
  onWindowCreated: (callback: (windowId: string) => void) => {
    console.log('üì° [Preload] onWindowCreated registered');
    const handler = (event: any, windowId: string) => {
      console.log('üì± [Preload] Received window-created:', windowId);
      callback(windowId);
    };
    ipcRenderer.on('window-created', handler);
    
    return () => {
      ipcRenderer.removeListener('window-created', handler);
    };
  },
  onWindowClosed: (callback: (windowId: string) => void) => {
    console.log('üì° [Preload] onWindowClosed registered');
    const handler = (event: any, windowId: string) => {
      console.log('üì± [Preload] Received window-closed:', windowId);
      callback(windowId);
    };
    ipcRenderer.on('window-closed', handler);
    
    return () => {
      ipcRenderer.removeListener('window-closed', handler);
    };
  },
  
  // –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π
  removeAllListeners: (channel: string) => {
    console.log(`üì° [Preload] removeAllListeners called for ${channel}`);
    ipcRenderer.removeAllListeners(channel);
  }
  
  // –ù–ï —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º API –∫–ª—é—á–∏!
});